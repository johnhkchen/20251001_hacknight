/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { DaytonaConfiguration } from '../models';
/**
 * ConfigApi - axios parameter creator
 * @export
 */
export declare const ConfigApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configControllerGetConfig: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConfigApi - functional programming interface
 * @export
 */
export declare const ConfigApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configControllerGetConfig(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DaytonaConfiguration>>;
};
/**
 * ConfigApi - factory interface
 * @export
 */
export declare const ConfigApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    configControllerGetConfig(options?: RawAxiosRequestConfig): AxiosPromise<DaytonaConfiguration>;
};
/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export declare class ConfigApi extends BaseAPI {
    /**
     *
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    configControllerGetConfig(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DaytonaConfiguration, any, {}>>;
}
