"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhooksApi = exports.WebhooksApiFactory = exports.WebhooksApiFp = exports.WebhooksApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
const WebhooksApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get Svix Consumer App Portal access URL for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetAppPortalAccess: async (organizationId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerGetAppPortalAccess', 'organizationId', organizationId);
            const localVarPath = `/webhooks/organizations/{organizationId}/app-portal-access`.replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get webhook initialization status for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetInitializationStatus: async (organizationId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerGetInitializationStatus', 'organizationId', organizationId);
            const localVarPath = `/webhooks/organizations/{organizationId}/initialization-status`.replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get delivery attempts for a webhook message
         * @param {string} organizationId
         * @param {string} messageId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetMessageAttempts: async (organizationId, messageId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerGetMessageAttempts', 'organizationId', organizationId);
            // verify required parameter 'messageId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerGetMessageAttempts', 'messageId', messageId);
            const localVarPath = `/webhooks/organizations/{organizationId}/messages/{messageId}/attempts`
                .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
                .replace(`{${'messageId'}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get webhook service status
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetStatus: async (xDaytonaOrganizationID, options = {}) => {
            const localVarPath = `/webhooks/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Initialize webhooks for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerInitializeWebhooks: async (organizationId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerInitializeWebhooks', 'organizationId', organizationId);
            const localVarPath = `/webhooks/organizations/{organizationId}/initialize`.replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Send a webhook message to an organization
         * @param {string} organizationId
         * @param {SendWebhookDto} sendWebhookDto
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerSendWebhook: async (organizationId, sendWebhookDto, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerSendWebhook', 'organizationId', organizationId);
            // verify required parameter 'sendWebhookDto' is not null or undefined
            (0, common_1.assertParamExists)('webhookControllerSendWebhook', 'sendWebhookDto', sendWebhookDto);
            const localVarPath = `/webhooks/organizations/{organizationId}/send`.replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sendWebhookDto, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.WebhooksApiAxiosParamCreator = WebhooksApiAxiosParamCreator;
/**
 * WebhooksApi - functional programming interface
 * @export
 */
const WebhooksApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.WebhooksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get Svix Consumer App Portal access URL for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerGetAppPortalAccess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get webhook initialization status for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerGetInitializationStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get delivery attempts for a webhook message
         * @param {string} organizationId
         * @param {string} messageId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerGetMessageAttempts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get webhook service status
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerGetStatus(xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerGetStatus(xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerGetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Initialize webhooks for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerInitializeWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Send a webhook message to an organization
         * @param {string} organizationId
         * @param {SendWebhookDto} sendWebhookDto
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['WebhooksApi.webhookControllerSendWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.WebhooksApiFp = WebhooksApiFp;
/**
 * WebhooksApi - factory interface
 * @export
 */
const WebhooksApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.WebhooksApiFp)(configuration);
    return {
        /**
         *
         * @summary Get Svix Consumer App Portal access URL for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get webhook initialization status for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get delivery attempts for a webhook message
         * @param {string} organizationId
         * @param {string} messageId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get webhook service status
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerGetStatus(xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerGetStatus(xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Initialize webhooks for an organization
         * @param {string} organizationId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Send a webhook message to an organization
         * @param {string} organizationId
         * @param {SendWebhookDto} sendWebhookDto
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options) {
            return localVarFp
                .webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.WebhooksApiFactory = WebhooksApiFactory;
/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
class WebhooksApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get Svix Consumer App Portal access URL for an organization
     * @param {string} organizationId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerGetAppPortalAccess(organizationId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get webhook initialization status for an organization
     * @param {string} organizationId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerGetInitializationStatus(organizationId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get delivery attempts for a webhook message
     * @param {string} organizationId
     * @param {string} messageId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerGetMessageAttempts(organizationId, messageId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get webhook service status
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerGetStatus(xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerGetStatus(xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Initialize webhooks for an organization
     * @param {string} organizationId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerInitializeWebhooks(organizationId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Send a webhook message to an organization
     * @param {string} organizationId
     * @param {SendWebhookDto} sendWebhookDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options) {
        return (0, exports.WebhooksApiFp)(this.configuration)
            .webhookControllerSendWebhook(organizationId, sendWebhookDto, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.WebhooksApi = WebhooksApi;
//# sourceMappingURL=webhooks-api.js.map