/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateOrganization } from '../models';
import type { CreateOrganizationInvitation } from '../models';
import type { CreateOrganizationRole } from '../models';
import type { Organization } from '../models';
import type { OrganizationInvitation } from '../models';
import type { OrganizationRole } from '../models';
import type { OrganizationSandboxDefaultLimitedNetworkEgress } from '../models';
import type { OrganizationSuspension } from '../models';
import type { OrganizationUsageOverview } from '../models';
import type { OrganizationUser } from '../models';
import type { UpdateOrganizationInvitation } from '../models';
import type { UpdateOrganizationMemberAccess } from '../models';
import type { UpdateOrganizationQuota } from '../models';
import type { UpdateOrganizationRole } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export declare const OrganizationsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation: (invitationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation: (organizationId: string, invitationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: (createOrganization: CreateOrganization, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation: (organizationId: string, createOrganizationInvitation: CreateOrganizationInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole: (organizationId: string, createOrganizationRole: CreateOrganizationRole, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation: (invitationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember: (organizationId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole: (organizationId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get organization by sandbox ID
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBySandboxId: (sandboxId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization: (organizationId: string, organizationSuspension?: OrganizationSuspension, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization: (organizationId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update access for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberAccess} updateOrganizationMemberAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessForOrganizationMember: (organizationId: string, userId: string, updateOrganizationMemberAccess: UpdateOrganizationMemberAccess, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation: (organizationId: string, invitationId: string, updateOrganizationInvitation: UpdateOrganizationInvitation, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota: (organizationId: string, updateOrganizationQuota: UpdateOrganizationQuota, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole: (organizationId: string, roleId: string, updateOrganizationRole: UpdateOrganizationRole, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update sandbox default limited network egress
     * @param {string} organizationId Organization ID
     * @param {OrganizationSandboxDefaultLimitedNetworkEgress} organizationSandboxDefaultLimitedNetworkEgress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxDefaultLimitedNetworkEgress: (organizationId: string, organizationSandboxDefaultLimitedNetworkEgress: OrganizationSandboxDefaultLimitedNetworkEgress, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export declare const OrganizationsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation(organizationId: string, invitationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(createOrganization: CreateOrganization, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>>;
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation(organizationId: string, createOrganizationInvitation: CreateOrganizationInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInvitation>>;
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole(organizationId: string, createOrganizationRole: CreateOrganizationRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRole>>;
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole(organizationId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>>;
    /**
     *
     * @summary Get organization by sandbox ID
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>>;
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>>;
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUsageOverview>>;
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationInvitation>>>;
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationInvitation>>>;
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUser>>>;
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRole>>>;
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>>;
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization(organizationId: string, organizationSuspension?: OrganizationSuspension, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update access for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberAccess} updateOrganizationMemberAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessForOrganizationMember(organizationId: string, userId: string, updateOrganizationMemberAccess: UpdateOrganizationMemberAccess, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>>;
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation(organizationId: string, invitationId: string, updateOrganizationInvitation: UpdateOrganizationInvitation, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInvitation>>;
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota(organizationId: string, updateOrganizationQuota: UpdateOrganizationQuota, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>>;
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole(organizationId: string, roleId: string, updateOrganizationRole: UpdateOrganizationRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRole>>;
    /**
     *
     * @summary Update sandbox default limited network egress
     * @param {string} organizationId Organization ID
     * @param {OrganizationSandboxDefaultLimitedNetworkEgress} organizationSandboxDefaultLimitedNetworkEgress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxDefaultLimitedNetworkEgress(organizationId: string, organizationSandboxDefaultLimitedNetworkEgress: OrganizationSandboxDefaultLimitedNetworkEgress, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OrganizationsApi - factory interface
 * @export
 */
export declare const OrganizationsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation(organizationId: string, invitationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(createOrganization: CreateOrganization, options?: RawAxiosRequestConfig): AxiosPromise<Organization>;
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation(organizationId: string, createOrganizationInvitation: CreateOrganizationInvitation, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationInvitation>;
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole(organizationId: string, createOrganizationRole: CreateOrganizationRole, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationRole>;
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole(organizationId: string, roleId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization>;
    /**
     *
     * @summary Get organization by sandbox ID
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization>;
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser(options?: RawAxiosRequestConfig): AxiosPromise<number>;
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUsageOverview>;
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationInvitation>>;
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationInvitation>>;
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationUser>>;
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationRole>>;
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>>;
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization(organizationId: string, organizationSuspension?: OrganizationSuspension, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update access for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberAccess} updateOrganizationMemberAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccessForOrganizationMember(organizationId: string, userId: string, updateOrganizationMemberAccess: UpdateOrganizationMemberAccess, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationUser>;
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation(organizationId: string, invitationId: string, updateOrganizationInvitation: UpdateOrganizationInvitation, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationInvitation>;
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota(organizationId: string, updateOrganizationQuota: UpdateOrganizationQuota, options?: RawAxiosRequestConfig): AxiosPromise<Organization>;
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole(organizationId: string, roleId: string, updateOrganizationRole: UpdateOrganizationRole, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationRole>;
    /**
     *
     * @summary Update sandbox default limited network egress
     * @param {string} organizationId Organization ID
     * @param {OrganizationSandboxDefaultLimitedNetworkEgress} organizationSandboxDefaultLimitedNetworkEgress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxDefaultLimitedNetworkEgress(organizationId: string, organizationSandboxDefaultLimitedNetworkEgress: OrganizationSandboxDefaultLimitedNetworkEgress, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export declare class OrganizationsApi extends BaseAPI {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    acceptOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    cancelOrganizationInvitation(organizationId: string, invitationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganization(createOrganization: CreateOrganization, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Organization, any, {}>>;
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganizationInvitation(organizationId: string, createOrganizationInvitation: CreateOrganizationInvitation, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationInvitation, any, {}>>;
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    createOrganizationRole(organizationId: string, createOrganizationRole: CreateOrganizationRole, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRole, any, {}>>;
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    declineOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    deleteOrganizationRole(organizationId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Organization, any, {}>>;
    /**
     *
     * @summary Get organization by sandbox ID
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Organization, any, {}>>;
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationInvitationsCountForAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<number, any, {}>>;
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    getOrganizationUsageOverview(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationUsageOverview, any, {}>>;
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    leaveOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationInvitations(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationInvitation[], any, {}>>;
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationInvitationsForAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationInvitation[], any, {}>>;
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationUser[], any, {}>>;
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizationRoles(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRole[], any, {}>>;
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    listOrganizations(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Organization[], any, {}>>;
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    suspendOrganization(organizationId: string, organizationSuspension?: OrganizationSuspension, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    unsuspendOrganization(organizationId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Update access for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberAccess} updateOrganizationMemberAccess
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateAccessForOrganizationMember(organizationId: string, userId: string, updateOrganizationMemberAccess: UpdateOrganizationMemberAccess, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationUser, any, {}>>;
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganizationInvitation(organizationId: string, invitationId: string, updateOrganizationInvitation: UpdateOrganizationInvitation, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationInvitation, any, {}>>;
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganizationQuota(organizationId: string, updateOrganizationQuota: UpdateOrganizationQuota, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Organization, any, {}>>;
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateOrganizationRole(organizationId: string, roleId: string, updateOrganizationRole: UpdateOrganizationRole, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OrganizationRole, any, {}>>;
    /**
     *
     * @summary Update sandbox default limited network egress
     * @param {string} organizationId Organization ID
     * @param {OrganizationSandboxDefaultLimitedNetworkEgress} organizationSandboxDefaultLimitedNetworkEgress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    updateSandboxDefaultLimitedNetworkEgress(organizationId: string, organizationSandboxDefaultLimitedNetworkEgress: OrganizationSandboxDefaultLimitedNetworkEgress, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
}
