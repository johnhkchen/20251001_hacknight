/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
/**
 * PreviewApi - axios parameter creator
 * @export
 */
export declare const PreviewApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasSandboxAccess: (sandboxId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isSandboxPublic: (sandboxId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isValidAuthToken: (sandboxId: string, authToken: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PreviewApi - functional programming interface
 * @export
 */
export declare const PreviewApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasSandboxAccess(sandboxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isSandboxPublic(sandboxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isValidAuthToken(sandboxId: string, authToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>>;
};
/**
 * PreviewApi - factory interface
 * @export
 */
export declare const PreviewApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasSandboxAccess(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isSandboxPublic(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isValidAuthToken(sandboxId: string, authToken: string, options?: RawAxiosRequestConfig): AxiosPromise<boolean>;
};
/**
 * PreviewApi - object-oriented interface
 * @export
 * @class PreviewApi
 * @extends {BaseAPI}
 */
export declare class PreviewApi extends BaseAPI {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewApi
     */
    hasSandboxAccess(sandboxId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewApi
     */
    isSandboxPublic(sandboxId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any, {}>>;
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreviewApi
     */
    isValidAuthToken(sandboxId: string, authToken: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<boolean, any, {}>>;
}
