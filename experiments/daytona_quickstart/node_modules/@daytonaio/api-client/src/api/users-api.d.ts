/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AccountProvider } from '../models';
import type { CreateLinkedAccount } from '../models';
import type { CreateUser } from '../models';
import type { User } from '../models';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: (createUser: CreateUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Enroll in SMS MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollInSmsMfa: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAccountProviders: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAccount: (createLinkedAccount: CreateLinkedAccount, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateKeyPair: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkAccount: (provider: string, providerUserId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUser: CreateUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Enroll in SMS MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollInSmsMfa(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAccountProviders(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountProvider>>>;
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>>;
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAccount(createLinkedAccount: CreateLinkedAccount, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateKeyPair(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkAccount(provider: string, providerUserId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUser: CreateUser, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Enroll in SMS MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    enrollInSmsMfa(options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser(options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAccountProviders(options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountProvider>>;
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User>;
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAccount(createLinkedAccount: CreateLinkedAccount, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateKeyPair(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkAccount(provider: string, providerUserId: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    createUser(createUser: CreateUser, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Enroll in SMS MFA
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    enrollInSmsMfa(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any, {}>>;
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAuthenticatedUser(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any, {}>>;
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getAvailableAccountProviders(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountProvider[], any, {}>>;
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    getUser(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<User, any, {}>>;
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    linkAccount(createLinkedAccount: CreateLinkedAccount, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    listUsers(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    regenerateKeyPair(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    unlinkAccount(provider: string, providerUserId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
}
