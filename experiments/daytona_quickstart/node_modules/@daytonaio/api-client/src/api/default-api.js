"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxCreatedPost: async (sandboxCreatedPostRequest, options = {}) => {
            const localVarPath = `/sandbox.created`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sandboxCreatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxStateUpdatedPost: async (sandboxStateUpdatedPostRequest, options = {}) => {
            const localVarPath = `/sandbox.state.updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sandboxStateUpdatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotCreatedPost: async (snapshotCreatedPostRequest, options = {}) => {
            const localVarPath = `/snapshot.created`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(snapshotCreatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotRemovedPost: async (snapshotRemovedPostRequest, options = {}) => {
            const localVarPath = `/snapshot.removed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(snapshotRemovedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotStateUpdatedPost: async (snapshotStateUpdatedPostRequest, options = {}) => {
            const localVarPath = `/snapshot.state.updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(snapshotStateUpdatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreatedPost: async (volumeCreatedPostRequest, options = {}) => {
            const localVarPath = `/volume.created`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(volumeCreatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeStateUpdatedPost: async (volumeStateUpdatedPostRequest, options = {}) => {
            const localVarPath = `/volume.state.updated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(volumeStateUpdatedPostRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxCreatedPost(sandboxCreatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxCreatedPost(sandboxCreatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.sandboxCreatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.sandboxStateUpdatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async snapshotCreatedPost(snapshotCreatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotCreatedPost(snapshotCreatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.snapshotCreatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async snapshotRemovedPost(snapshotRemovedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotRemovedPost(snapshotRemovedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.snapshotRemovedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.snapshotStateUpdatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeCreatedPost(volumeCreatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeCreatedPost(volumeCreatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.volumeCreatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['DefaultApi.volumeStateUpdatedPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         *
         * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxCreatedPost(sandboxCreatedPostRequest, options) {
            return localVarFp
                .sandboxCreatedPost(sandboxCreatedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options) {
            return localVarFp
                .sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotCreatedPost(snapshotCreatedPostRequest, options) {
            return localVarFp
                .snapshotCreatedPost(snapshotCreatedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotRemovedPost(snapshotRemovedPostRequest, options) {
            return localVarFp
                .snapshotRemovedPost(snapshotRemovedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options) {
            return localVarFp
                .snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreatedPost(volumeCreatedPostRequest, options) {
            return localVarFp.volumeCreatedPost(volumeCreatedPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options) {
            return localVarFp
                .volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     *
     * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    sandboxCreatedPost(sandboxCreatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .sandboxCreatedPost(sandboxCreatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    snapshotCreatedPost(snapshotCreatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .snapshotCreatedPost(snapshotCreatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    snapshotRemovedPost(snapshotRemovedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .snapshotRemovedPost(snapshotRemovedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    volumeCreatedPost(volumeCreatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .volumeCreatedPost(volumeCreatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
//# sourceMappingURL=default-api.js.map