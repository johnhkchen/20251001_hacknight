"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolboxApi = exports.ToolboxApiFactory = exports.ToolboxApiFp = exports.ToolboxApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ToolboxApi - axios parameter creator
 * @export
 */
const ToolboxApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Click mouse at specified coordinates
         * @summary Click mouse
         * @param {string} sandboxId
         * @param {MouseClickRequest} mouseClickRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clickMouse: async (sandboxId, mouseClickRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('clickMouse', 'sandboxId', sandboxId);
            // verify required parameter 'mouseClickRequest' is not null or undefined
            (0, common_1.assertParamExists)('clickMouse', 'mouseClickRequest', mouseClickRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/click`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mouseClickRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create folder inside sandbox
         * @summary Create folder
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} mode
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder: async (sandboxId, path, mode, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('createFolder', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('createFolder', 'path', path);
            // verify required parameter 'mode' is not null or undefined
            (0, common_1.assertParamExists)('createFolder', 'mode', mode);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/folder`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new session in the sandbox
         * @summary Create session
         * @param {string} sandboxId
         * @param {CreateSessionRequest} createSessionRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession: async (sandboxId, createSessionRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('createSession', 'sandboxId', sandboxId);
            // verify required parameter 'createSessionRequest' is not null or undefined
            (0, common_1.assertParamExists)('createSession', 'createSessionRequest', createSessionRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createSessionRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete file inside sandbox
         * @summary Delete file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [recursive]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (sandboxId, path, xDaytonaOrganizationID, recursive, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('deleteFile', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('deleteFile', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (recursive !== undefined) {
                localVarQueryParameter['recursive'] = recursive;
            }
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific session
         * @summary Delete session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession: async (sandboxId, sessionId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('deleteSession', 'sandboxId', sandboxId);
            // verify required parameter 'sessionId' is not null or undefined
            (0, common_1.assertParamExists)('deleteSession', 'sessionId', sessionId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
                .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Download file from sandbox
         * @summary Download file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadFile: async (sandboxId, path, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('downloadFile', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('downloadFile', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/download`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Streams back a multipart/form-data bundle of the requested paths
         * @summary Download multiple files
         * @param {string} sandboxId
         * @param {DownloadFiles} downloadFiles
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles: async (sandboxId, downloadFiles, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('downloadFiles', 'sandboxId', sandboxId);
            // verify required parameter 'downloadFiles' is not null or undefined
            (0, common_1.assertParamExists)('downloadFiles', 'downloadFiles', downloadFiles);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/bulk-download`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(downloadFiles, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Drag mouse from start to end coordinates
         * @summary Drag mouse
         * @param {string} sandboxId
         * @param {MouseDragRequest} mouseDragRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dragMouse: async (sandboxId, mouseDragRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('dragMouse', 'sandboxId', sandboxId);
            // verify required parameter 'mouseDragRequest' is not null or undefined
            (0, common_1.assertParamExists)('dragMouse', 'mouseDragRequest', mouseDragRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/drag`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mouseDragRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute command synchronously inside sandbox
         * @summary Execute command
         * @param {string} sandboxId
         * @param {ExecuteRequest} executeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeCommand: async (sandboxId, executeRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('executeCommand', 'sandboxId', sandboxId);
            // verify required parameter 'executeRequest' is not null or undefined
            (0, common_1.assertParamExists)('executeCommand', 'executeRequest', executeRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/execute`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(executeRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Execute a command in a specific session
         * @summary Execute command in session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {SessionExecuteRequest} sessionExecuteRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSessionCommand: async (sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('executeSessionCommand', 'sandboxId', sandboxId);
            // verify required parameter 'sessionId' is not null or undefined
            (0, common_1.assertParamExists)('executeSessionCommand', 'sessionId', sessionId);
            // verify required parameter 'sessionExecuteRequest' is not null or undefined
            (0, common_1.assertParamExists)('executeSessionCommand', 'sessionExecuteRequest', sessionExecuteRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/exec`
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
                .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sessionExecuteRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for text/pattern inside sandbox files
         * @summary Search for text/pattern in files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInFiles: async (sandboxId, path, pattern, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('findInFiles', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('findInFiles', 'path', path);
            // verify required parameter 'pattern' is not null or undefined
            (0, common_1.assertParamExists)('findInFiles', 'pattern', pattern);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/find`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (pattern !== undefined) {
                localVarQueryParameter['pattern'] = pattern;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status of all VNC desktop processes
         * @summary Get computer use status
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputerUseStatus: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getComputerUseStatus', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/status`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about displays
         * @summary Get display info
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayInfo: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getDisplayInfo', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/display/info`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get file info inside sandbox
         * @summary Get file info
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo: async (sandboxId, path, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getFileInfo', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('getFileInfo', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/info`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current mouse cursor position
         * @summary Get mouse position
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMousePosition: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getMousePosition', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/position`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get error logs for a specific VNC process
         * @summary Get process errors
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessErrors: async (processName, sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'processName' is not null or undefined
            (0, common_1.assertParamExists)('getProcessErrors', 'processName', processName);
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessErrors', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/errors`
                .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get logs for a specific VNC process
         * @summary Get process logs
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessLogs: async (processName, sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'processName' is not null or undefined
            (0, common_1.assertParamExists)('getProcessLogs', 'processName', processName);
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessLogs', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/logs`
                .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status of a specific VNC process
         * @summary Get process status
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessStatus: async (processName, sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'processName' is not null or undefined
            (0, common_1.assertParamExists)('getProcessStatus', 'processName', processName);
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getProcessStatus', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/status`
                .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get sandbox project dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getProjectDir: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getProjectDir', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/project-dir`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get session by ID
         * @summary Get session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession: async (sandboxId, sessionId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getSession', 'sandboxId', sandboxId);
            // verify required parameter 'sessionId' is not null or undefined
            (0, common_1.assertParamExists)('getSession', 'sessionId', sessionId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
                .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get session command by ID
         * @summary Get session command
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionCommand: async (sandboxId, sessionId, commandId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommand', 'sandboxId', sandboxId);
            // verify required parameter 'sessionId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommand', 'sessionId', sessionId);
            // verify required parameter 'commandId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommand', 'commandId', commandId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}`
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
                .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get logs for a specific command in a session
         * @summary Get command logs
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [follow] Whether to stream the logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionCommandLogs: async (sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommandLogs', 'sandboxId', sandboxId);
            // verify required parameter 'sessionId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommandLogs', 'sessionId', sessionId);
            // verify required parameter 'commandId' is not null or undefined
            (0, common_1.assertParamExists)('getSessionCommandLogs', 'commandId', commandId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}/logs`
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
                .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
                .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get sandbox user home dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHomeDir: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getUserHomeDir', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/user-home-dir`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of open windows
         * @summary Get windows
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWindows: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getWindows', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/display/windows`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get sandbox work-dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkDir: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('getWorkDir', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/work-dir`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add files to git commit
         * @summary Add files
         * @param {string} sandboxId
         * @param {GitAddRequest} gitAddRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitAddFiles: async (sandboxId, gitAddRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitAddFiles', 'sandboxId', sandboxId);
            // verify required parameter 'gitAddRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitAddFiles', 'gitAddRequest', gitAddRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/add`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitAddRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checkout branch or commit in git repository
         * @summary Checkout branch
         * @param {string} sandboxId
         * @param {GitCheckoutRequest} gitCheckoutRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCheckoutBranch: async (sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitCheckoutBranch', 'sandboxId', sandboxId);
            // verify required parameter 'gitCheckoutRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitCheckoutBranch', 'gitCheckoutRequest', gitCheckoutRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/checkout`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitCheckoutRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clone git repository
         * @summary Clone repository
         * @param {string} sandboxId
         * @param {GitCloneRequest} gitCloneRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCloneRepository: async (sandboxId, gitCloneRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitCloneRepository', 'sandboxId', sandboxId);
            // verify required parameter 'gitCloneRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitCloneRepository', 'gitCloneRequest', gitCloneRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/clone`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitCloneRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Commit changes to git repository
         * @summary Commit changes
         * @param {string} sandboxId
         * @param {GitCommitRequest} gitCommitRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCommitChanges: async (sandboxId, gitCommitRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitCommitChanges', 'sandboxId', sandboxId);
            // verify required parameter 'gitCommitRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitCommitChanges', 'gitCommitRequest', gitCommitRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/commit`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitCommitRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create branch on git repository
         * @summary Create branch
         * @param {string} sandboxId
         * @param {GitBranchRequest} gitBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCreateBranch: async (sandboxId, gitBranchRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitCreateBranch', 'sandboxId', sandboxId);
            // verify required parameter 'gitBranchRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitCreateBranch', 'gitBranchRequest', gitBranchRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitBranchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete branch on git repository
         * @summary Delete branch
         * @param {string} sandboxId
         * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitDeleteBranch: async (sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitDeleteBranch', 'sandboxId', sandboxId);
            // verify required parameter 'gitDeleteBranchRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitDeleteBranch', 'gitDeleteBranchRequest', gitDeleteBranchRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitDeleteBranchRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get commit history from git repository
         * @summary Get commit history
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitGetHistory: async (sandboxId, path, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitGetHistory', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('gitGetHistory', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/history`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status from git repository
         * @summary Get git status
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitGetStatus: async (sandboxId, path, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitGetStatus', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('gitGetStatus', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/status`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get branch list from git repository
         * @summary Get branch list
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitListBranches: async (sandboxId, path, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitListBranches', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('gitListBranches', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pull changes from remote
         * @summary Pull changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitPullChanges: async (sandboxId, gitRepoRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitPullChanges', 'sandboxId', sandboxId);
            // verify required parameter 'gitRepoRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitPullChanges', 'gitRepoRequest', gitRepoRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/pull`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitRepoRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push changes to remote
         * @summary Push changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitPushChanges: async (sandboxId, gitRepoRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('gitPushChanges', 'sandboxId', sandboxId);
            // verify required parameter 'gitRepoRequest' is not null or undefined
            (0, common_1.assertParamExists)('gitPushChanges', 'gitRepoRequest', gitRepoRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/git/push`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(gitRepoRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary List files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: async (sandboxId, xDaytonaOrganizationID, path, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('listFiles', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all active sessions in the sandbox
         * @summary List sessions
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('listSessions', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
         * @summary Get Lsp Completions
         * @param {string} sandboxId
         * @param {LspCompletionParams} lspCompletionParams
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspCompletions: async (sandboxId, lspCompletionParams, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspCompletions', 'sandboxId', sandboxId);
            // verify required parameter 'lspCompletionParams' is not null or undefined
            (0, common_1.assertParamExists)('lspCompletions', 'lspCompletionParams', lspCompletionParams);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/completions`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lspCompletionParams, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The document close notification is sent from the client to the server when the document got closed in the client.
         * @summary Call Lsp DidClose
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDidClose: async (sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspDidClose', 'sandboxId', sandboxId);
            // verify required parameter 'lspDocumentRequest' is not null or undefined
            (0, common_1.assertParamExists)('lspDidClose', 'lspDocumentRequest', lspDocumentRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-close`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lspDocumentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The document open notification is sent from the client to the server to signal newly opened text documents.
         * @summary Call Lsp DidOpen
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDidOpen: async (sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspDidOpen', 'sandboxId', sandboxId);
            // verify required parameter 'lspDocumentRequest' is not null or undefined
            (0, common_1.assertParamExists)('lspDidOpen', 'lspDocumentRequest', lspDocumentRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-open`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lspDocumentRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The document symbol request is sent from the client to the server.
         * @summary Call Lsp DocumentSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} uri
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDocumentSymbols: async (sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspDocumentSymbols', 'sandboxId', sandboxId);
            // verify required parameter 'languageId' is not null or undefined
            (0, common_1.assertParamExists)('lspDocumentSymbols', 'languageId', languageId);
            // verify required parameter 'pathToProject' is not null or undefined
            (0, common_1.assertParamExists)('lspDocumentSymbols', 'pathToProject', pathToProject);
            // verify required parameter 'uri' is not null or undefined
            (0, common_1.assertParamExists)('lspDocumentSymbols', 'uri', uri);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/document-symbols`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (languageId !== undefined) {
                localVarQueryParameter['languageId'] = languageId;
            }
            if (pathToProject !== undefined) {
                localVarQueryParameter['pathToProject'] = pathToProject;
            }
            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start Lsp server process inside sandbox project
         * @summary Start Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspStart: async (sandboxId, lspServerRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspStart', 'sandboxId', sandboxId);
            // verify required parameter 'lspServerRequest' is not null or undefined
            (0, common_1.assertParamExists)('lspStart', 'lspServerRequest', lspServerRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/start`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lspServerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop Lsp server process inside sandbox project
         * @summary Stop Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspStop: async (sandboxId, lspServerRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspStop', 'sandboxId', sandboxId);
            // verify required parameter 'lspServerRequest' is not null or undefined
            (0, common_1.assertParamExists)('lspStop', 'lspServerRequest', lspServerRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/stop`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(lspServerRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
         * @summary Call Lsp WorkspaceSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} query
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspWorkspaceSymbols: async (sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('lspWorkspaceSymbols', 'sandboxId', sandboxId);
            // verify required parameter 'languageId' is not null or undefined
            (0, common_1.assertParamExists)('lspWorkspaceSymbols', 'languageId', languageId);
            // verify required parameter 'pathToProject' is not null or undefined
            (0, common_1.assertParamExists)('lspWorkspaceSymbols', 'pathToProject', pathToProject);
            // verify required parameter 'query' is not null or undefined
            (0, common_1.assertParamExists)('lspWorkspaceSymbols', 'query', query);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/workspace-symbols`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (languageId !== undefined) {
                localVarQueryParameter['languageId'] = languageId;
            }
            if (pathToProject !== undefined) {
                localVarQueryParameter['pathToProject'] = pathToProject;
            }
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move file inside sandbox
         * @summary Move file
         * @param {string} sandboxId
         * @param {string} source
         * @param {string} destination
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveFile: async (sandboxId, source, destination, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('moveFile', 'sandboxId', sandboxId);
            // verify required parameter 'source' is not null or undefined
            (0, common_1.assertParamExists)('moveFile', 'source', source);
            // verify required parameter 'destination' is not null or undefined
            (0, common_1.assertParamExists)('moveFile', 'destination', destination);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/move`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }
            if (destination !== undefined) {
                localVarQueryParameter['destination'] = destination;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Move mouse cursor to specified coordinates
         * @summary Move mouse
         * @param {string} sandboxId
         * @param {MouseMoveRequest} mouseMoveRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveMouse: async (sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('moveMouse', 'sandboxId', sandboxId);
            // verify required parameter 'mouseMoveRequest' is not null or undefined
            (0, common_1.assertParamExists)('moveMouse', 'mouseMoveRequest', mouseMoveRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/move`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mouseMoveRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Press a hotkey combination
         * @summary Press hotkey
         * @param {string} sandboxId
         * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressHotkey: async (sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('pressHotkey', 'sandboxId', sandboxId);
            // verify required parameter 'keyboardHotkeyRequest' is not null or undefined
            (0, common_1.assertParamExists)('pressHotkey', 'keyboardHotkeyRequest', keyboardHotkeyRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/hotkey`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(keyboardHotkeyRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Press a key with optional modifiers
         * @summary Press key
         * @param {string} sandboxId
         * @param {KeyboardPressRequest} keyboardPressRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressKey: async (sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('pressKey', 'sandboxId', sandboxId);
            // verify required parameter 'keyboardPressRequest' is not null or undefined
            (0, common_1.assertParamExists)('pressKey', 'keyboardPressRequest', keyboardPressRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/key`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(keyboardPressRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace text/pattern in multiple files inside sandbox
         * @summary Replace in files
         * @param {string} sandboxId
         * @param {ReplaceRequest} replaceRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceInFiles: async (sandboxId, replaceRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('replaceInFiles', 'sandboxId', sandboxId);
            // verify required parameter 'replaceRequest' is not null or undefined
            (0, common_1.assertParamExists)('replaceInFiles', 'replaceRequest', replaceRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/replace`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(replaceRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restart a specific VNC process
         * @summary Restart process
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartProcess: async (processName, sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'processName' is not null or undefined
            (0, common_1.assertParamExists)('restartProcess', 'processName', processName);
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('restartProcess', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/restart`
                .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
                .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Scroll mouse at specified coordinates
         * @summary Scroll mouse
         * @param {string} sandboxId
         * @param {MouseScrollRequest} mouseScrollRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrollMouse: async (sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('scrollMouse', 'sandboxId', sandboxId);
            // verify required parameter 'mouseScrollRequest' is not null or undefined
            (0, common_1.assertParamExists)('scrollMouse', 'mouseScrollRequest', mouseScrollRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/scroll`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mouseScrollRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for files inside sandbox
         * @summary Search files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFiles: async (sandboxId, path, pattern, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('searchFiles', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('searchFiles', 'path', path);
            // verify required parameter 'pattern' is not null or undefined
            (0, common_1.assertParamExists)('searchFiles', 'pattern', pattern);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/search`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (pattern !== undefined) {
                localVarQueryParameter['pattern'] = pattern;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set file owner/group/permissions inside sandbox
         * @summary Set file permissions
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [owner]
         * @param {string} [group]
         * @param {string} [mode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFilePermissions: async (sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('setFilePermissions', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('setFilePermissions', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/permissions`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (owner !== undefined) {
                localVarQueryParameter['owner'] = owner;
            }
            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Start computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startComputerUse: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('startComputerUse', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/start`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Stop computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopComputerUse: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('stopComputerUse', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/stop`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take a compressed screenshot of a specific region
         * @summary Take compressed region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeCompressedRegionScreenshot: async (sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedRegionScreenshot', 'sandboxId', sandboxId);
            // verify required parameter 'height' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedRegionScreenshot', 'height', height);
            // verify required parameter 'width' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedRegionScreenshot', 'width', width);
            // verify required parameter 'y' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedRegionScreenshot', 'y', y);
            // verify required parameter 'x' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedRegionScreenshot', 'x', x);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region/compressed`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (scale !== undefined) {
                localVarQueryParameter['scale'] = scale;
            }
            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }
            if (showCursor !== undefined) {
                localVarQueryParameter['show_cursor'] = showCursor;
            }
            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }
            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }
            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take a compressed screenshot with format, quality, and scale options
         * @summary Take compressed screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeCompressedScreenshot: async (sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('takeCompressedScreenshot', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/compressed`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (scale !== undefined) {
                localVarQueryParameter['scale'] = scale;
            }
            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }
            if (showCursor !== undefined) {
                localVarQueryParameter['show_cursor'] = showCursor;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take a screenshot of a specific region
         * @summary Take region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeRegionScreenshot: async (sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('takeRegionScreenshot', 'sandboxId', sandboxId);
            // verify required parameter 'height' is not null or undefined
            (0, common_1.assertParamExists)('takeRegionScreenshot', 'height', height);
            // verify required parameter 'width' is not null or undefined
            (0, common_1.assertParamExists)('takeRegionScreenshot', 'width', width);
            // verify required parameter 'y' is not null or undefined
            (0, common_1.assertParamExists)('takeRegionScreenshot', 'y', y);
            // verify required parameter 'x' is not null or undefined
            (0, common_1.assertParamExists)('takeRegionScreenshot', 'x', x);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (showCursor !== undefined) {
                localVarQueryParameter['show_cursor'] = showCursor;
            }
            if (height !== undefined) {
                localVarQueryParameter['height'] = height;
            }
            if (width !== undefined) {
                localVarQueryParameter['width'] = width;
            }
            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }
            if (x !== undefined) {
                localVarQueryParameter['x'] = x;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Take a screenshot of the entire screen
         * @summary Take screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeScreenshot: async (sandboxId, xDaytonaOrganizationID, showCursor, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('takeScreenshot', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (showCursor !== undefined) {
                localVarQueryParameter['show_cursor'] = showCursor;
            }
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Type text using keyboard
         * @summary Type text
         * @param {string} sandboxId
         * @param {KeyboardTypeRequest} keyboardTypeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeText: async (sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('typeText', 'sandboxId', sandboxId);
            // verify required parameter 'keyboardTypeRequest' is not null or undefined
            (0, common_1.assertParamExists)('typeText', 'keyboardTypeRequest', keyboardTypeRequest);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/type`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(keyboardTypeRequest, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload file inside sandbox
         * @summary Upload file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uploadFile: async (sandboxId, path, xDaytonaOrganizationID, file, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('uploadFile', 'sandboxId', sandboxId);
            // verify required parameter 'path' is not null or undefined
            (0, common_1.assertParamExists)('uploadFile', 'path', path);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/upload`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }
            if (file !== undefined) {
                localVarFormParams.append('file', file);
            }
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = localVarFormParams;
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload multiple files inside sandbox
         * @summary Upload multiple files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFiles: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
            // verify required parameter 'sandboxId' is not null or undefined
            (0, common_1.assertParamExists)('uploadFiles', 'sandboxId', sandboxId);
            const localVarPath = `/toolbox/{sandboxId}/toolbox/files/bulk-upload`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (xDaytonaOrganizationID != null) {
                localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID);
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ToolboxApiAxiosParamCreator = ToolboxApiAxiosParamCreator;
/**
 * ToolboxApi - functional programming interface
 * @export
 */
const ToolboxApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ToolboxApiAxiosParamCreator)(configuration);
    return {
        /**
         * Click mouse at specified coordinates
         * @summary Click mouse
         * @param {string} sandboxId
         * @param {MouseClickRequest} mouseClickRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.clickMouse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create folder inside sandbox
         * @summary Create folder
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} mode
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.createFolder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new session in the sandbox
         * @summary Create session
         * @param {string} sandboxId
         * @param {CreateSessionRequest} createSessionRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.createSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete file inside sandbox
         * @summary Delete file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [recursive]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.deleteFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a specific session
         * @summary Delete session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.deleteSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Download file from sandbox
         * @summary Download file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async downloadFile(sandboxId, path, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(sandboxId, path, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.downloadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Streams back a multipart/form-data bundle of the requested paths
         * @summary Download multiple files
         * @param {string} sandboxId
         * @param {DownloadFiles} downloadFiles
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.downloadFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Drag mouse from start to end coordinates
         * @summary Drag mouse
         * @param {string} sandboxId
         * @param {MouseDragRequest} mouseDragRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.dragMouse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Execute command synchronously inside sandbox
         * @summary Execute command
         * @param {string} sandboxId
         * @param {ExecuteRequest} executeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.executeCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Execute a command in a specific session
         * @summary Execute command in session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {SessionExecuteRequest} sessionExecuteRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.executeSessionCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for text/pattern inside sandbox files
         * @summary Search for text/pattern in files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.findInFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get status of all VNC desktop processes
         * @summary Get computer use status
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getComputerUseStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get information about displays
         * @summary Get display info
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDisplayInfo(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDisplayInfo(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getDisplayInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get file info inside sandbox
         * @summary Get file info
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileInfo(sandboxId, path, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileInfo(sandboxId, path, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getFileInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current mouse cursor position
         * @summary Get mouse position
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMousePosition(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMousePosition(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getMousePosition']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get error logs for a specific VNC process
         * @summary Get process errors
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getProcessErrors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get logs for a specific VNC process
         * @summary Get process logs
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getProcessLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get status of a specific VNC process
         * @summary Get process status
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getProcessStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get sandbox project dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async getProjectDir(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDir(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getProjectDir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get session by ID
         * @summary Get session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(sandboxId, sessionId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getSession']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get session command by ID
         * @summary Get session command
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getSessionCommand']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get logs for a specific command in a session
         * @summary Get command logs
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [follow] Whether to stream the logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getSessionCommandLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get sandbox user home dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserHomeDir(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHomeDir(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getUserHomeDir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get list of open windows
         * @summary Get windows
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWindows(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWindows(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getWindows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get sandbox work-dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkDir(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkDir(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.getWorkDir']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add files to git commit
         * @summary Add files
         * @param {string} sandboxId
         * @param {GitAddRequest} gitAddRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitAddFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Checkout branch or commit in git repository
         * @summary Checkout branch
         * @param {string} sandboxId
         * @param {GitCheckoutRequest} gitCheckoutRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitCheckoutBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Clone git repository
         * @summary Clone repository
         * @param {string} sandboxId
         * @param {GitCloneRequest} gitCloneRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitCloneRepository']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Commit changes to git repository
         * @summary Commit changes
         * @param {string} sandboxId
         * @param {GitCommitRequest} gitCommitRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitCommitChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create branch on git repository
         * @summary Create branch
         * @param {string} sandboxId
         * @param {GitBranchRequest} gitBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitCreateBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete branch on git repository
         * @summary Delete branch
         * @param {string} sandboxId
         * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitDeleteBranch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get commit history from git repository
         * @summary Get commit history
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitGetHistory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get status from git repository
         * @summary Get git status
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitGetStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get branch list from git repository
         * @summary Get branch list
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitListBranches(sandboxId, path, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitListBranches(sandboxId, path, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitListBranches']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Pull changes from remote
         * @summary Pull changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitPullChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Push changes to remote
         * @summary Push changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.gitPushChanges']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary List files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFiles(sandboxId, xDaytonaOrganizationID, path, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(sandboxId, xDaytonaOrganizationID, path, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.listFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List all active sessions in the sandbox
         * @summary List sessions
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSessions(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSessions(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.listSessions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
         * @summary Get Lsp Completions
         * @param {string} sandboxId
         * @param {LspCompletionParams} lspCompletionParams
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspCompletions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The document close notification is sent from the client to the server when the document got closed in the client.
         * @summary Call Lsp DidClose
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspDidClose']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The document open notification is sent from the client to the server to signal newly opened text documents.
         * @summary Call Lsp DidOpen
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspDidOpen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The document symbol request is sent from the client to the server.
         * @summary Call Lsp DocumentSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} uri
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspDocumentSymbols']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start Lsp server process inside sandbox project
         * @summary Start Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspStart']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stop Lsp server process inside sandbox project
         * @summary Stop Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspStop']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
         * @summary Call Lsp WorkspaceSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} query
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.lspWorkspaceSymbols']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Move file inside sandbox
         * @summary Move file
         * @param {string} sandboxId
         * @param {string} source
         * @param {string} destination
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.moveFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Move mouse cursor to specified coordinates
         * @summary Move mouse
         * @param {string} sandboxId
         * @param {MouseMoveRequest} mouseMoveRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.moveMouse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Press a hotkey combination
         * @summary Press hotkey
         * @param {string} sandboxId
         * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.pressHotkey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Press a key with optional modifiers
         * @summary Press key
         * @param {string} sandboxId
         * @param {KeyboardPressRequest} keyboardPressRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.pressKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Replace text/pattern in multiple files inside sandbox
         * @summary Replace in files
         * @param {string} sandboxId
         * @param {ReplaceRequest} replaceRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.replaceInFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Restart a specific VNC process
         * @summary Restart process
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restartProcess(processName, sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.restartProcess(processName, sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.restartProcess']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Scroll mouse at specified coordinates
         * @summary Scroll mouse
         * @param {string} sandboxId
         * @param {MouseScrollRequest} mouseScrollRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.scrollMouse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for files inside sandbox
         * @summary Search files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.searchFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Set file owner/group/permissions inside sandbox
         * @summary Set file permissions
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [owner]
         * @param {string} [group]
         * @param {string} [mode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.setFilePermissions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Start computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startComputerUse(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startComputerUse(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.startComputerUse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Stop computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopComputerUse(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopComputerUse(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.stopComputerUse']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Take a compressed screenshot of a specific region
         * @summary Take compressed region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.takeCompressedRegionScreenshot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Take a compressed screenshot with format, quality, and scale options
         * @summary Take compressed screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.takeCompressedScreenshot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Take a screenshot of a specific region
         * @summary Take region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.takeRegionScreenshot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Take a screenshot of the entire screen
         * @summary Take screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.takeScreenshot']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Type text using keyboard
         * @summary Type text
         * @param {string} sandboxId
         * @param {KeyboardTypeRequest} keyboardTypeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.typeText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload file inside sandbox
         * @summary Upload file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.uploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload multiple files inside sandbox
         * @summary Upload multiple files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFiles(sandboxId, xDaytonaOrganizationID, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFiles(sandboxId, xDaytonaOrganizationID, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ToolboxApi.uploadFiles']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ToolboxApiFp = ToolboxApiFp;
/**
 * ToolboxApi - factory interface
 * @export
 */
const ToolboxApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ToolboxApiFp)(configuration);
    return {
        /**
         * Click mouse at specified coordinates
         * @summary Click mouse
         * @param {string} sandboxId
         * @param {MouseClickRequest} mouseClickRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Create folder inside sandbox
         * @summary Create folder
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} mode
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options) {
            return localVarFp
                .createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Create a new session in the sandbox
         * @summary Create session
         * @param {string} sandboxId
         * @param {CreateSessionRequest} createSessionRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete file inside sandbox
         * @summary Delete file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [recursive]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options) {
            return localVarFp
                .deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific session
         * @summary Delete session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
            return localVarFp
                .deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Download file from sandbox
         * @summary Download file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        downloadFile(sandboxId, path, xDaytonaOrganizationID, options) {
            return localVarFp
                .downloadFile(sandboxId, path, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Streams back a multipart/form-data bundle of the requested paths
         * @summary Download multiple files
         * @param {string} sandboxId
         * @param {DownloadFiles} downloadFiles
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options) {
            return localVarFp
                .downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Drag mouse from start to end coordinates
         * @summary Drag mouse
         * @param {string} sandboxId
         * @param {MouseDragRequest} mouseDragRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Execute command synchronously inside sandbox
         * @summary Execute command
         * @param {string} sandboxId
         * @param {ExecuteRequest} executeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Execute a command in a specific session
         * @summary Execute command in session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {SessionExecuteRequest} sessionExecuteRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Search for text/pattern inside sandbox files
         * @summary Search for text/pattern in files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
            return localVarFp
                .findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get status of all VNC desktop processes
         * @summary Get computer use status
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get information about displays
         * @summary Get display info
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDisplayInfo(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getDisplayInfo(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get file info inside sandbox
         * @summary Get file info
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileInfo(sandboxId, path, xDaytonaOrganizationID, options) {
            return localVarFp
                .getFileInfo(sandboxId, path, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get current mouse cursor position
         * @summary Get mouse position
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMousePosition(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getMousePosition(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get error logs for a specific VNC process
         * @summary Get process errors
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get logs for a specific VNC process
         * @summary Get process logs
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get status of a specific VNC process
         * @summary Get process status
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get sandbox project dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        getProjectDir(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getProjectDir(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get session by ID
         * @summary Get session
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get session command by ID
         * @summary Get session command
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get logs for a specific command in a session
         * @summary Get command logs
         * @param {string} sandboxId
         * @param {string} sessionId
         * @param {string} commandId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [follow] Whether to stream the logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options) {
            return localVarFp
                .getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get sandbox user home dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserHomeDir(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getUserHomeDir(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get list of open windows
         * @summary Get windows
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWindows(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getWindows(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get sandbox work-dir
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkDir(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .getWorkDir(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Add files to git commit
         * @summary Add files
         * @param {string} sandboxId
         * @param {GitAddRequest} gitAddRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Checkout branch or commit in git repository
         * @summary Checkout branch
         * @param {string} sandboxId
         * @param {GitCheckoutRequest} gitCheckoutRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Clone git repository
         * @summary Clone repository
         * @param {string} sandboxId
         * @param {GitCloneRequest} gitCloneRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Commit changes to git repository
         * @summary Commit changes
         * @param {string} sandboxId
         * @param {GitCommitRequest} gitCommitRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Create branch on git repository
         * @summary Create branch
         * @param {string} sandboxId
         * @param {GitBranchRequest} gitBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Delete branch on git repository
         * @summary Delete branch
         * @param {string} sandboxId
         * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get commit history from git repository
         * @summary Get commit history
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get status from git repository
         * @summary Get git status
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Get branch list from git repository
         * @summary Get branch list
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitListBranches(sandboxId, path, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitListBranches(sandboxId, path, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Pull changes from remote
         * @summary Pull changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Push changes to remote
         * @summary Push changes
         * @param {string} sandboxId
         * @param {GitRepoRequest} gitRepoRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [path]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(sandboxId, xDaytonaOrganizationID, path, options) {
            return localVarFp
                .listFiles(sandboxId, xDaytonaOrganizationID, path, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * List all active sessions in the sandbox
         * @summary List sessions
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSessions(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .listSessions(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
         * @summary Get Lsp Completions
         * @param {string} sandboxId
         * @param {LspCompletionParams} lspCompletionParams
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The document close notification is sent from the client to the server when the document got closed in the client.
         * @summary Call Lsp DidClose
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The document open notification is sent from the client to the server to signal newly opened text documents.
         * @summary Call Lsp DidOpen
         * @param {string} sandboxId
         * @param {LspDocumentRequest} lspDocumentRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The document symbol request is sent from the client to the server.
         * @summary Call Lsp DocumentSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} uri
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Start Lsp server process inside sandbox project
         * @summary Start Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Stop Lsp server process inside sandbox project
         * @summary Stop Lsp server
         * @param {string} sandboxId
         * @param {LspServerRequest} lspServerRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
         * @summary Call Lsp WorkspaceSymbols
         * @param {string} sandboxId
         * @param {string} languageId
         * @param {string} pathToProject
         * @param {string} query
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options) {
            return localVarFp
                .lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Move file inside sandbox
         * @summary Move file
         * @param {string} sandboxId
         * @param {string} source
         * @param {string} destination
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options) {
            return localVarFp
                .moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Move mouse cursor to specified coordinates
         * @summary Move mouse
         * @param {string} sandboxId
         * @param {MouseMoveRequest} mouseMoveRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Press a hotkey combination
         * @summary Press hotkey
         * @param {string} sandboxId
         * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Press a key with optional modifiers
         * @summary Press key
         * @param {string} sandboxId
         * @param {KeyboardPressRequest} keyboardPressRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Replace text/pattern in multiple files inside sandbox
         * @summary Replace in files
         * @param {string} sandboxId
         * @param {ReplaceRequest} replaceRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Restart a specific VNC process
         * @summary Restart process
         * @param {string} processName
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartProcess(processName, sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .restartProcess(processName, sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Scroll mouse at specified coordinates
         * @summary Scroll mouse
         * @param {string} sandboxId
         * @param {MouseScrollRequest} mouseScrollRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Search for files inside sandbox
         * @summary Search files
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} pattern
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
            return localVarFp
                .searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Set file owner/group/permissions inside sandbox
         * @summary Set file permissions
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {string} [owner]
         * @param {string} [group]
         * @param {string} [mode]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options) {
            return localVarFp
                .setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Start computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startComputerUse(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .startComputerUse(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
         * @summary Stop computer use processes
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopComputerUse(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .stopComputerUse(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Take a compressed screenshot of a specific region
         * @summary Take compressed region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
            return localVarFp
                .takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Take a compressed screenshot with format, quality, and scale options
         * @summary Take compressed screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {number} [scale]
         * @param {number} [quality]
         * @param {string} [format]
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
            return localVarFp
                .takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Take a screenshot of a specific region
         * @summary Take region screenshot
         * @param {string} sandboxId
         * @param {number} height
         * @param {number} width
         * @param {number} y
         * @param {number} x
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options) {
            return localVarFp
                .takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Take a screenshot of the entire screen
         * @summary Take screenshot
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {boolean} [showCursor]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options) {
            return localVarFp
                .takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Type text using keyboard
         * @summary Type text
         * @param {string} sandboxId
         * @param {KeyboardTypeRequest} keyboardTypeRequest
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options) {
            return localVarFp
                .typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Upload file inside sandbox
         * @summary Upload file
         * @param {string} sandboxId
         * @param {string} path
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options) {
            return localVarFp
                .uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options)
                .then((request) => request(axios, basePath));
        },
        /**
         * Upload multiple files inside sandbox
         * @summary Upload multiple files
         * @param {string} sandboxId
         * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFiles(sandboxId, xDaytonaOrganizationID, options) {
            return localVarFp
                .uploadFiles(sandboxId, xDaytonaOrganizationID, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.ToolboxApiFactory = ToolboxApiFactory;
/**
 * ToolboxApi - object-oriented interface
 * @export
 * @class ToolboxApi
 * @extends {BaseAPI}
 */
class ToolboxApi extends base_1.BaseAPI {
    /**
     * Click mouse at specified coordinates
     * @summary Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .clickMouse(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .deleteFile(sandboxId, path, xDaytonaOrganizationID, recursive, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    downloadFile(sandboxId, path, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .downloadFile(sandboxId, path, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .downloadFiles(sandboxId, downloadFiles, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Drag mouse from start to end coordinates
     * @summary Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .dragMouse(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get status of all VNC desktop processes
     * @summary Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getComputerUseStatus(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get information about displays
     * @summary Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getDisplayInfo(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getDisplayInfo(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getFileInfo(sandboxId, path, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getFileInfo(sandboxId, path, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get current mouse cursor position
     * @summary Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getMousePosition(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getMousePosition(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get error logs for a specific VNC process
     * @summary Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getProcessErrors(processName, sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get logs for a specific VNC process
     * @summary Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getProcessLogs(processName, sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get status of a specific VNC process
     * @summary Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getProcessStatus(processName, sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProjectDir(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getProjectDir(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSession(sandboxId, sessionId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getUserHomeDir(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getUserHomeDir(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of open windows
     * @summary Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getWindows(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getWindows(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getWorkDir(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .getWorkDir(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitListBranches(sandboxId, path, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitListBranches(sandboxId, path, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    listFiles(sandboxId, xDaytonaOrganizationID, path, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .listFiles(sandboxId, xDaytonaOrganizationID, path, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    listSessions(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .listSessions(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Move mouse cursor to specified coordinates
     * @summary Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .moveMouse(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Press a hotkey combination
     * @summary Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .pressHotkey(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .pressKey(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Restart a specific VNC process
     * @summary Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    restartProcess(processName, sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .restartProcess(processName, sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Scroll mouse at specified coordinates
     * @summary Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .scrollMouse(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    startComputerUse(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .startComputerUse(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    stopComputerUse(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .stopComputerUse(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Take a compressed screenshot of a specific region
     * @summary Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .takeCompressedRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, scale, quality, format, showCursor, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .takeCompressedScreenshot(sandboxId, xDaytonaOrganizationID, scale, quality, format, showCursor, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Take a screenshot of a specific region
     * @summary Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .takeRegionScreenshot(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Take a screenshot of the entire screen
     * @summary Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .takeScreenshot(sandboxId, xDaytonaOrganizationID, showCursor, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Type text using keyboard
     * @summary Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .typeText(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    uploadFiles(sandboxId, xDaytonaOrganizationID, options) {
        return (0, exports.ToolboxApiFp)(this.configuration)
            .uploadFiles(sandboxId, xDaytonaOrganizationID, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ToolboxApi = ToolboxApi;
//# sourceMappingURL=toolbox-api.js.map