/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ApiKeyList } from '../models';
import type { ApiKeyResponse } from '../models';
import type { CreateApiKey } from '../models';
/**
 * ApiKeysApi - axios parameter creator
 * @export
 */
export declare const ApiKeysApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create API key
     * @param {CreateApiKey} createApiKey
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey: (createApiKey: CreateApiKey, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey: (name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete API key for user
     * @param {string} userId
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyForUser: (userId: string, name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey: (name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get current API key\'s details
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentApiKey: (xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List API keys
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys: (xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ApiKeysApi - functional programming interface
 * @export
 */
export declare const ApiKeysApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create API key
     * @param {CreateApiKey} createApiKey
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(createApiKey: CreateApiKey, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyResponse>>;
    /**
     *
     * @summary Delete API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete API key for user
     * @param {string} userId
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyForUser(userId: string, name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyList>>;
    /**
     *
     * @summary Get current API key\'s details
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentApiKey(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeyList>>;
    /**
     *
     * @summary List API keys
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiKeyList>>>;
};
/**
 * ApiKeysApi - factory interface
 * @export
 */
export declare const ApiKeysApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create API key
     * @param {CreateApiKey} createApiKey
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(createApiKey: CreateApiKey, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyResponse>;
    /**
     *
     * @summary Delete API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete API key for user
     * @param {string} userId
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKeyForUser(userId: string, name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList>;
    /**
     *
     * @summary Get current API key\'s details
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentApiKey(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ApiKeyList>;
    /**
     *
     * @summary List API keys
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ApiKeyList>>;
};
/**
 * ApiKeysApi - object-oriented interface
 * @export
 * @class ApiKeysApi
 * @extends {BaseAPI}
 */
export declare class ApiKeysApi extends BaseAPI {
    /**
     *
     * @summary Create API key
     * @param {CreateApiKey} createApiKey
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    createApiKey(createApiKey: CreateApiKey, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyResponse, any, {}>>;
    /**
     *
     * @summary Delete API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    deleteApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Delete API key for user
     * @param {string} userId
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    deleteApiKeyForUser(userId: string, name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get API key
     * @param {string} name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    getApiKey(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyList, any, {}>>;
    /**
     *
     * @summary Get current API key\'s details
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    getCurrentApiKey(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyList, any, {}>>;
    /**
     *
     * @summary List API keys
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiKeysApi
     */
    listApiKeys(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ApiKeyList[], any, {}>>;
}
