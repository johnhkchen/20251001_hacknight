/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateSandbox } from '../models';
import type { PortPreviewUrl } from '../models';
import type { Sandbox } from '../models';
import type { SandboxLabels } from '../models';
import type { SshAccessDto } from '../models';
import type { SshAccessValidationDto } from '../models';
import type { UpdateSandboxStateDto } from '../models';
/**
 * SandboxApi - axios parameter creator
 * @export
 */
export declare const SandboxApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveSandbox: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSandbox: (createSandbox: CreateSandbox, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [expiresInMinutes] Expiration time in minutes (default: 60)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSshAccess: (sandboxId: string, xDaytonaOrganizationID?: string, expiresInMinutes?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSandbox: (sandboxId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs: (sandboxId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPortPreviewUrl: (sandboxId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandbox: (sandboxId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get sandboxes for the authenticated runner
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [states] Comma-separated list of sandbox states to filter by
     * @param {boolean} [skipReconcilingSandboxes] Skip sandboxes where state differs from desired state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandboxesForRunner: (xDaytonaOrganizationID?: string, states?: string, skipReconcilingSandboxes?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {boolean} [includeErroredDeleted] Include errored and deleted sandboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSandboxes: (xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, includeErroredDeleted?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceLabels: (sandboxId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Revoke SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [token] SSH access token to revoke. If not provided, all SSH access for the sandbox will be revoked.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSshAccess: (sandboxId: string, xDaytonaOrganizationID?: string, token?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoArchiveInterval: (sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set sandbox auto-delete interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-delete interval in minutes (negative value means disabled, 0 means delete immediately upon stopping)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoDeleteInterval: (sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutostopInterval: (sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startSandbox: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopSandbox: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicStatus: (sandboxId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update sandbox state
     * @param {string} sandboxId ID of the sandbox
     * @param {UpdateSandboxStateDto} updateSandboxStateDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxState: (sandboxId: string, updateSandboxStateDto: UpdateSandboxStateDto, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Validate SSH access for sandbox
     * @param {string} token SSH access token to validate
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateSshAccess: (token: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SandboxApi - functional programming interface
 * @export
 */
export declare const SandboxApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sandbox>>;
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSandbox(createSandbox: CreateSandbox, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sandbox>>;
    /**
     *
     * @summary Create SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [expiresInMinutes] Expiration time in minutes (default: 60)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, expiresInMinutes?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SshAccessDto>>;
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSandbox(sandboxId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs(sandboxId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPortPreviewUrl(sandboxId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortPreviewUrl>>;
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandbox(sandboxId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sandbox>>;
    /**
     *
     * @summary Get sandboxes for the authenticated runner
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [states] Comma-separated list of sandbox states to filter by
     * @param {boolean} [skipReconcilingSandboxes] Skip sandboxes where state differs from desired state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandboxesForRunner(xDaytonaOrganizationID?: string, states?: string, skipReconcilingSandboxes?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Sandbox>>>;
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {boolean} [includeErroredDeleted] Include errored and deleted sandboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSandboxes(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, includeErroredDeleted?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Sandbox>>>;
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceLabels(sandboxId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxLabels>>;
    /**
     *
     * @summary Revoke SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [token] SSH access token to revoke. If not provided, all SSH access for the sandbox will be revoked.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, token?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoArchiveInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set sandbox auto-delete interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-delete interval in minutes (negative value means disabled, 0 means delete immediately upon stopping)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoDeleteInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutostopInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Sandbox>>;
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicStatus(sandboxId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update sandbox state
     * @param {string} sandboxId ID of the sandbox
     * @param {UpdateSandboxStateDto} updateSandboxStateDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxState(sandboxId: string, updateSandboxStateDto: UpdateSandboxStateDto, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Validate SSH access for sandbox
     * @param {string} token SSH access token to validate
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateSshAccess(token: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SshAccessValidationDto>>;
};
/**
 * SandboxApi - factory interface
 * @export
 */
export declare const SandboxApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Sandbox>;
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSandbox(createSandbox: CreateSandbox, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Sandbox>;
    /**
     *
     * @summary Create SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [expiresInMinutes] Expiration time in minutes (default: 60)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, expiresInMinutes?: number, options?: RawAxiosRequestConfig): AxiosPromise<SshAccessDto>;
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSandbox(sandboxId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs(sandboxId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPortPreviewUrl(sandboxId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<PortPreviewUrl>;
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandbox(sandboxId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Sandbox>;
    /**
     *
     * @summary Get sandboxes for the authenticated runner
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [states] Comma-separated list of sandbox states to filter by
     * @param {boolean} [skipReconcilingSandboxes] Skip sandboxes where state differs from desired state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandboxesForRunner(xDaytonaOrganizationID?: string, states?: string, skipReconcilingSandboxes?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<Sandbox>>;
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {boolean} [includeErroredDeleted] Include errored and deleted sandboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSandboxes(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, includeErroredDeleted?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<Sandbox>>;
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceLabels(sandboxId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<SandboxLabels>;
    /**
     *
     * @summary Revoke SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [token] SSH access token to revoke. If not provided, all SSH access for the sandbox will be revoked.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revokeSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, token?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoArchiveInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set sandbox auto-delete interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-delete interval in minutes (negative value means disabled, 0 means delete immediately upon stopping)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoDeleteInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutostopInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Sandbox>;
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicStatus(sandboxId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update sandbox state
     * @param {string} sandboxId ID of the sandbox
     * @param {UpdateSandboxStateDto} updateSandboxStateDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSandboxState(sandboxId: string, updateSandboxStateDto: UpdateSandboxStateDto, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Validate SSH access for sandbox
     * @param {string} token SSH access token to validate
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateSshAccess(token: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<SshAccessValidationDto>;
};
/**
 * SandboxApi - object-oriented interface
 * @export
 * @class SandboxApi
 * @extends {BaseAPI}
 */
export declare class SandboxApi extends BaseAPI {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    archiveSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    createBackup(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox, any, {}>>;
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    createSandbox(createSandbox: CreateSandbox, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox, any, {}>>;
    /**
     *
     * @summary Create SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [expiresInMinutes] Expiration time in minutes (default: 60)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    createSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, expiresInMinutes?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SshAccessDto, any, {}>>;
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    deleteSandbox(sandboxId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    getBuildLogs(sandboxId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    getPortPreviewUrl(sandboxId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PortPreviewUrl, any, {}>>;
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    getSandbox(sandboxId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox, any, {}>>;
    /**
     *
     * @summary Get sandboxes for the authenticated runner
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [states] Comma-separated list of sandbox states to filter by
     * @param {boolean} [skipReconcilingSandboxes] Skip sandboxes where state differs from desired state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    getSandboxesForRunner(xDaytonaOrganizationID?: string, states?: string, skipReconcilingSandboxes?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox[], any, {}>>;
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {boolean} [includeErroredDeleted] Include errored and deleted sandboxes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    listSandboxes(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, includeErroredDeleted?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox[], any, {}>>;
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    replaceLabels(sandboxId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SandboxLabels, any, {}>>;
    /**
     *
     * @summary Revoke SSH access for sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [token] SSH access token to revoke. If not provided, all SSH access for the sandbox will be revoked.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    revokeSshAccess(sandboxId: string, xDaytonaOrganizationID?: string, token?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    setAutoArchiveInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Set sandbox auto-delete interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-delete interval in minutes (negative value means disabled, 0 means delete immediately upon stopping)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    setAutoDeleteInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    setAutostopInterval(sandboxId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    startSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Sandbox, any, {}>>;
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    stopSandbox(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    updatePublicStatus(sandboxId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Update sandbox state
     * @param {string} sandboxId ID of the sandbox
     * @param {UpdateSandboxStateDto} updateSandboxStateDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    updateSandboxState(sandboxId: string, updateSandboxStateDto: UpdateSandboxStateDto, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Validate SSH access for sandbox
     * @param {string} token SSH access token to validate
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SandboxApi
     */
    validateSshAccess(token: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SshAccessValidationDto, any, {}>>;
}
