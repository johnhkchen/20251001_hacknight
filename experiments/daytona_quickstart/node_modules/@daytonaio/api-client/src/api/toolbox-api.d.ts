/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { Command } from '../models';
import type { CompletionList } from '../models';
import type { CompressedScreenshotResponse } from '../models';
import type { ComputerUseStartResponse } from '../models';
import type { ComputerUseStatusResponse } from '../models';
import type { ComputerUseStopResponse } from '../models';
import type { CreateSessionRequest } from '../models';
import type { DisplayInfoResponse } from '../models';
import type { DownloadFiles } from '../models';
import type { ExecuteRequest } from '../models';
import type { ExecuteResponse } from '../models';
import type { FileInfo } from '../models';
import type { GitAddRequest } from '../models';
import type { GitBranchRequest } from '../models';
import type { GitCheckoutRequest } from '../models';
import type { GitCloneRequest } from '../models';
import type { GitCommitInfo } from '../models';
import type { GitCommitRequest } from '../models';
import type { GitCommitResponse } from '../models';
import type { GitDeleteBranchRequest } from '../models';
import type { GitRepoRequest } from '../models';
import type { GitStatus } from '../models';
import type { KeyboardHotkeyRequest } from '../models';
import type { KeyboardPressRequest } from '../models';
import type { KeyboardTypeRequest } from '../models';
import type { ListBranchResponse } from '../models';
import type { LspCompletionParams } from '../models';
import type { LspDocumentRequest } from '../models';
import type { LspServerRequest } from '../models';
import type { LspSymbol } from '../models';
import type { Match } from '../models';
import type { MouseClickRequest } from '../models';
import type { MouseClickResponse } from '../models';
import type { MouseDragRequest } from '../models';
import type { MouseDragResponse } from '../models';
import type { MouseMoveRequest } from '../models';
import type { MouseMoveResponse } from '../models';
import type { MousePosition } from '../models';
import type { MouseScrollRequest } from '../models';
import type { MouseScrollResponse } from '../models';
import type { ProcessErrorsResponse } from '../models';
import type { ProcessLogsResponse } from '../models';
import type { ProcessRestartResponse } from '../models';
import type { ProcessStatusResponse } from '../models';
import type { ProjectDirResponse } from '../models';
import type { RegionScreenshotResponse } from '../models';
import type { ReplaceRequest } from '../models';
import type { ReplaceResult } from '../models';
import type { ScreenshotResponse } from '../models';
import type { SearchFilesResponse } from '../models';
import type { Session } from '../models';
import type { SessionExecuteRequest } from '../models';
import type { SessionExecuteResponse } from '../models';
import type { UserHomeDirResponse } from '../models';
import type { WindowsResponse } from '../models';
import type { WorkDirResponse } from '../models';
/**
 * ToolboxApi - axios parameter creator
 * @export
 */
export declare const ToolboxApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Click mouse at specified coordinates
     * @summary Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clickMouse: (sandboxId: string, mouseClickRequest: MouseClickRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: (sandboxId: string, path: string, mode: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession: (sandboxId: string, createSessionRequest: CreateSessionRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, recursive?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession: (sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFile: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFiles: (sandboxId: string, downloadFiles: DownloadFiles, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Drag mouse from start to end coordinates
     * @summary Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dragMouse: (sandboxId: string, mouseDragRequest: MouseDragRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCommand: (sandboxId: string, executeRequest: ExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSessionCommand: (sandboxId: string, sessionId: string, sessionExecuteRequest: SessionExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInFiles: (sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get status of all VNC desktop processes
     * @summary Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseStatus: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information about displays
     * @summary Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisplayInfo: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileInfo: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get current mouse cursor position
     * @summary Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMousePosition: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get error logs for a specific VNC process
     * @summary Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessErrors: (processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get logs for a specific VNC process
     * @summary Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessLogs: (processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get status of a specific VNC process
     * @summary Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessStatus: (processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProjectDir: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession: (sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommand: (sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommandLogs: (sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserHomeDir: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of open windows
     * @summary Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWindows: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkDir: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitAddFiles: (sandboxId: string, gitAddRequest: GitAddRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCheckoutBranch: (sandboxId: string, gitCheckoutRequest: GitCheckoutRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCloneRepository: (sandboxId: string, gitCloneRequest: GitCloneRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCommitChanges: (sandboxId: string, gitCommitRequest: GitCommitRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCreateBranch: (sandboxId: string, gitBranchRequest: GitBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitDeleteBranch: (sandboxId: string, gitDeleteBranchRequest: GitDeleteBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetHistory: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetStatus: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitListBranches: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPullChanges: (sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPushChanges: (sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles: (sandboxId: string, xDaytonaOrganizationID?: string, path?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspCompletions: (sandboxId: string, lspCompletionParams: LspCompletionParams, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidClose: (sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidOpen: (sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDocumentSymbols: (sandboxId: string, languageId: string, pathToProject: string, uri: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStart: (sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStop: (sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspWorkspaceSymbols: (sandboxId: string, languageId: string, pathToProject: string, query: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveFile: (sandboxId: string, source: string, destination: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Move mouse cursor to specified coordinates
     * @summary Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveMouse: (sandboxId: string, mouseMoveRequest: MouseMoveRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Press a hotkey combination
     * @summary Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressHotkey: (sandboxId: string, keyboardHotkeyRequest: KeyboardHotkeyRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressKey: (sandboxId: string, keyboardPressRequest: KeyboardPressRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInFiles: (sandboxId: string, replaceRequest: ReplaceRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Restart a specific VNC process
     * @summary Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restartProcess: (processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Scroll mouse at specified coordinates
     * @summary Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scrollMouse: (sandboxId: string, mouseScrollRequest: MouseScrollRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles: (sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFilePermissions: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, owner?: string, group?: string, mode?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startComputerUse: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopComputerUse: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Take a compressed screenshot of a specific region
     * @summary Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshot: (sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedScreenshot: (sandboxId: string, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Take a screenshot of a specific region
     * @summary Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeRegionScreenshot: (sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Take a screenshot of the entire screen
     * @summary Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeScreenshot: (sandboxId: string, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Type text using keyboard
     * @summary Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeText: (sandboxId: string, keyboardTypeRequest: KeyboardTypeRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFile: (sandboxId: string, path: string, xDaytonaOrganizationID?: string, file?: File, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFiles: (sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ToolboxApi - functional programming interface
 * @export
 */
export declare const ToolboxApiFp: (configuration?: Configuration) => {
    /**
     * Click mouse at specified coordinates
     * @summary Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clickMouse(sandboxId: string, mouseClickRequest: MouseClickRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseClickResponse>>;
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(sandboxId: string, path: string, mode: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(sandboxId: string, createSessionRequest: CreateSessionRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, recursive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFiles(sandboxId: string, downloadFiles: DownloadFiles, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     * Drag mouse from start to end coordinates
     * @summary Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dragMouse(sandboxId: string, mouseDragRequest: MouseDragRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseDragResponse>>;
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCommand(sandboxId: string, executeRequest: ExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteResponse>>;
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSessionCommand(sandboxId: string, sessionId: string, sessionExecuteRequest: SessionExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionExecuteResponse>>;
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>>;
    /**
     * Get status of all VNC desktop processes
     * @summary Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseStatus(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStatusResponse>>;
    /**
     * Get information about displays
     * @summary Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisplayInfo(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisplayInfoResponse>>;
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileInfo(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>>;
    /**
     * Get current mouse cursor position
     * @summary Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMousePosition(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MousePosition>>;
    /**
     * Get error logs for a specific VNC process
     * @summary Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessErrors(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessErrorsResponse>>;
    /**
     * Get logs for a specific VNC process
     * @summary Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessLogs(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessLogsResponse>>;
    /**
     * Get status of a specific VNC process
     * @summary Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessStatus(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessStatusResponse>>;
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProjectDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDirResponse>>;
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>>;
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommand(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Command>>;
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommandLogs(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserHomeDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserHomeDirResponse>>;
    /**
     * Get list of open windows
     * @summary Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWindows(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WindowsResponse>>;
    /**
     *
     * @summary Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkDirResponse>>;
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitAddFiles(sandboxId: string, gitAddRequest: GitAddRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCheckoutBranch(sandboxId: string, gitCheckoutRequest: GitCheckoutRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCloneRepository(sandboxId: string, gitCloneRequest: GitCloneRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCommitChanges(sandboxId: string, gitCommitRequest: GitCommitRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitCommitResponse>>;
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCreateBranch(sandboxId: string, gitBranchRequest: GitBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitDeleteBranch(sandboxId: string, gitDeleteBranchRequest: GitDeleteBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetHistory(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GitCommitInfo>>>;
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetStatus(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitStatus>>;
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitListBranches(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBranchResponse>>;
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPullChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPushChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(sandboxId: string, xDaytonaOrganizationID?: string, path?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileInfo>>>;
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>>;
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspCompletions(sandboxId: string, lspCompletionParams: LspCompletionParams, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletionList>>;
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidClose(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidOpen(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDocumentSymbols(sandboxId: string, languageId: string, pathToProject: string, uri: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>>;
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStart(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStop(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspWorkspaceSymbols(sandboxId: string, languageId: string, pathToProject: string, query: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>>;
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveFile(sandboxId: string, source: string, destination: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Move mouse cursor to specified coordinates
     * @summary Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveMouse(sandboxId: string, mouseMoveRequest: MouseMoveRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseMoveResponse>>;
    /**
     * Press a hotkey combination
     * @summary Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressHotkey(sandboxId: string, keyboardHotkeyRequest: KeyboardHotkeyRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressKey(sandboxId: string, keyboardPressRequest: KeyboardPressRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInFiles(sandboxId: string, replaceRequest: ReplaceRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReplaceResult>>>;
    /**
     * Restart a specific VNC process
     * @summary Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restartProcess(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessRestartResponse>>;
    /**
     * Scroll mouse at specified coordinates
     * @summary Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scrollMouse(sandboxId: string, mouseScrollRequest: MouseScrollRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseScrollResponse>>;
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilesResponse>>;
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFilePermissions(sandboxId: string, path: string, xDaytonaOrganizationID?: string, owner?: string, group?: string, mode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStartResponse>>;
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStopResponse>>;
    /**
     * Take a compressed screenshot of a specific region
     * @summary Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompressedScreenshotResponse>>;
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompressedScreenshotResponse>>;
    /**
     * Take a screenshot of a specific region
     * @summary Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionScreenshotResponse>>;
    /**
     * Take a screenshot of the entire screen
     * @summary Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>>;
    /**
     * Type text using keyboard
     * @summary Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeText(sandboxId: string, keyboardTypeRequest: KeyboardTypeRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFiles(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ToolboxApi - factory interface
 * @export
 */
export declare const ToolboxApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Click mouse at specified coordinates
     * @summary Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    clickMouse(sandboxId: string, mouseClickRequest: MouseClickRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<MouseClickResponse>;
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(sandboxId: string, path: string, mode: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(sandboxId: string, createSessionRequest: CreateSessionRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, recursive?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFiles(sandboxId: string, downloadFiles: DownloadFiles, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<File>;
    /**
     * Drag mouse from start to end coordinates
     * @summary Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dragMouse(sandboxId: string, mouseDragRequest: MouseDragRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<MouseDragResponse>;
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCommand(sandboxId: string, executeRequest: ExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ExecuteResponse>;
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSessionCommand(sandboxId: string, sessionId: string, sessionExecuteRequest: SessionExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<SessionExecuteResponse>;
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Match>>;
    /**
     * Get status of all VNC desktop processes
     * @summary Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseStatus(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStatusResponse>;
    /**
     * Get information about displays
     * @summary Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisplayInfo(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DisplayInfoResponse>;
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileInfo(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<FileInfo>;
    /**
     * Get current mouse cursor position
     * @summary Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMousePosition(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<MousePosition>;
    /**
     * Get error logs for a specific VNC process
     * @summary Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessErrors(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessErrorsResponse>;
    /**
     * Get logs for a specific VNC process
     * @summary Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessLogs(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessLogsResponse>;
    /**
     * Get status of a specific VNC process
     * @summary Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessStatus(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessStatusResponse>;
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProjectDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDirResponse>;
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Session>;
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommand(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Command>;
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommandLogs(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<string>;
    /**
     *
     * @summary Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserHomeDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<UserHomeDirResponse>;
    /**
     * Get list of open windows
     * @summary Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWindows(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<WindowsResponse>;
    /**
     *
     * @summary Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWorkDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<WorkDirResponse>;
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitAddFiles(sandboxId: string, gitAddRequest: GitAddRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCheckoutBranch(sandboxId: string, gitCheckoutRequest: GitCheckoutRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCloneRepository(sandboxId: string, gitCloneRequest: GitCloneRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCommitChanges(sandboxId: string, gitCommitRequest: GitCommitRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<GitCommitResponse>;
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCreateBranch(sandboxId: string, gitBranchRequest: GitBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitDeleteBranch(sandboxId: string, gitDeleteBranchRequest: GitDeleteBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetHistory(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<GitCommitInfo>>;
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetStatus(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<GitStatus>;
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitListBranches(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ListBranchResponse>;
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPullChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPushChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(sandboxId: string, xDaytonaOrganizationID?: string, path?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<FileInfo>>;
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Session>>;
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspCompletions(sandboxId: string, lspCompletionParams: LspCompletionParams, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<CompletionList>;
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidClose(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidOpen(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDocumentSymbols(sandboxId: string, languageId: string, pathToProject: string, uri: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<LspSymbol>>;
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStart(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStop(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspWorkspaceSymbols(sandboxId: string, languageId: string, pathToProject: string, query: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<LspSymbol>>;
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveFile(sandboxId: string, source: string, destination: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Move mouse cursor to specified coordinates
     * @summary Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveMouse(sandboxId: string, mouseMoveRequest: MouseMoveRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<MouseMoveResponse>;
    /**
     * Press a hotkey combination
     * @summary Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressHotkey(sandboxId: string, keyboardHotkeyRequest: KeyboardHotkeyRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressKey(sandboxId: string, keyboardPressRequest: KeyboardPressRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInFiles(sandboxId: string, replaceRequest: ReplaceRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReplaceResult>>;
    /**
     * Restart a specific VNC process
     * @summary Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restartProcess(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessRestartResponse>;
    /**
     * Scroll mouse at specified coordinates
     * @summary Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scrollMouse(sandboxId: string, mouseScrollRequest: MouseScrollRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<MouseScrollResponse>;
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<SearchFilesResponse>;
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFilePermissions(sandboxId: string, path: string, xDaytonaOrganizationID?: string, owner?: string, group?: string, mode?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStartResponse>;
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStopResponse>;
    /**
     * Take a compressed screenshot of a specific region
     * @summary Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CompressedScreenshotResponse>;
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<CompressedScreenshotResponse>;
    /**
     * Take a screenshot of a specific region
     * @summary Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<RegionScreenshotResponse>;
    /**
     * Take a screenshot of the entire screen
     * @summary Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ScreenshotResponse>;
    /**
     * Type text using keyboard
     * @summary Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeText(sandboxId: string, keyboardTypeRequest: KeyboardTypeRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, file?: File, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFiles(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * ToolboxApi - object-oriented interface
 * @export
 * @class ToolboxApi
 * @extends {BaseAPI}
 */
export declare class ToolboxApi extends BaseAPI {
    /**
     * Click mouse at specified coordinates
     * @summary Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    clickMouse(sandboxId: string, mouseClickRequest: MouseClickRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MouseClickResponse, any, {}>>;
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    createFolder(sandboxId: string, path: string, mode: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    createSession(sandboxId: string, createSessionRequest: CreateSessionRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    deleteFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, recursive?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    deleteSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    downloadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<File, any, {}>>;
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    downloadFiles(sandboxId: string, downloadFiles: DownloadFiles, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<File, any, {}>>;
    /**
     * Drag mouse from start to end coordinates
     * @summary Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    dragMouse(sandboxId: string, mouseDragRequest: MouseDragRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MouseDragResponse, any, {}>>;
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    executeCommand(sandboxId: string, executeRequest: ExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ExecuteResponse, any, {}>>;
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    executeSessionCommand(sandboxId: string, sessionId: string, sessionExecuteRequest: SessionExecuteRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SessionExecuteResponse, any, {}>>;
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    findInFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Match[], any, {}>>;
    /**
     * Get status of all VNC desktop processes
     * @summary Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getComputerUseStatus(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ComputerUseStatusResponse, any, {}>>;
    /**
     * Get information about displays
     * @summary Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getDisplayInfo(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DisplayInfoResponse, any, {}>>;
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getFileInfo(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileInfo, any, {}>>;
    /**
     * Get current mouse cursor position
     * @summary Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getMousePosition(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MousePosition, any, {}>>;
    /**
     * Get error logs for a specific VNC process
     * @summary Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessErrors(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessErrorsResponse, any, {}>>;
    /**
     * Get logs for a specific VNC process
     * @summary Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessLogs(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessLogsResponse, any, {}>>;
    /**
     * Get status of a specific VNC process
     * @summary Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProcessStatus(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessStatusResponse, any, {}>>;
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getProjectDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectDirResponse, any, {}>>;
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSession(sandboxId: string, sessionId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Session, any, {}>>;
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSessionCommand(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Command, any, {}>>;
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getSessionCommandLogs(sandboxId: string, sessionId: string, commandId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any, {}>>;
    /**
     *
     * @summary Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getUserHomeDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserHomeDirResponse, any, {}>>;
    /**
     * Get list of open windows
     * @summary Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getWindows(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WindowsResponse, any, {}>>;
    /**
     *
     * @summary Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    getWorkDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<WorkDirResponse, any, {}>>;
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitAddFiles(sandboxId: string, gitAddRequest: GitAddRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCheckoutBranch(sandboxId: string, gitCheckoutRequest: GitCheckoutRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCloneRepository(sandboxId: string, gitCloneRequest: GitCloneRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCommitChanges(sandboxId: string, gitCommitRequest: GitCommitRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GitCommitResponse, any, {}>>;
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitCreateBranch(sandboxId: string, gitBranchRequest: GitBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitDeleteBranch(sandboxId: string, gitDeleteBranchRequest: GitDeleteBranchRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitGetHistory(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GitCommitInfo[], any, {}>>;
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitGetStatus(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GitStatus, any, {}>>;
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitListBranches(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ListBranchResponse, any, {}>>;
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitPullChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    gitPushChanges(sandboxId: string, gitRepoRequest: GitRepoRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    listFiles(sandboxId: string, xDaytonaOrganizationID?: string, path?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FileInfo[], any, {}>>;
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    listSessions(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Session[], any, {}>>;
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspCompletions(sandboxId: string, lspCompletionParams: LspCompletionParams, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CompletionList, any, {}>>;
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDidClose(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDidOpen(sandboxId: string, lspDocumentRequest: LspDocumentRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspDocumentSymbols(sandboxId: string, languageId: string, pathToProject: string, uri: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LspSymbol[], any, {}>>;
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspStart(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspStop(sandboxId: string, lspServerRequest: LspServerRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    lspWorkspaceSymbols(sandboxId: string, languageId: string, pathToProject: string, query: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LspSymbol[], any, {}>>;
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    moveFile(sandboxId: string, source: string, destination: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Move mouse cursor to specified coordinates
     * @summary Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    moveMouse(sandboxId: string, mouseMoveRequest: MouseMoveRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MouseMoveResponse, any, {}>>;
    /**
     * Press a hotkey combination
     * @summary Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    pressHotkey(sandboxId: string, keyboardHotkeyRequest: KeyboardHotkeyRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    pressKey(sandboxId: string, keyboardPressRequest: KeyboardPressRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    replaceInFiles(sandboxId: string, replaceRequest: ReplaceRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ReplaceResult[], any, {}>>;
    /**
     * Restart a specific VNC process
     * @summary Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    restartProcess(processName: string, sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProcessRestartResponse, any, {}>>;
    /**
     * Scroll mouse at specified coordinates
     * @summary Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    scrollMouse(sandboxId: string, mouseScrollRequest: MouseScrollRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MouseScrollResponse, any, {}>>;
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    searchFiles(sandboxId: string, path: string, pattern: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SearchFilesResponse, any, {}>>;
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    setFilePermissions(sandboxId: string, path: string, xDaytonaOrganizationID?: string, owner?: string, group?: string, mode?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    startComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ComputerUseStartResponse, any, {}>>;
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    stopComputerUse(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ComputerUseStopResponse, any, {}>>;
    /**
     * Take a compressed screenshot of a specific region
     * @summary Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeCompressedRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CompressedScreenshotResponse, any, {}>>;
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeCompressedScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, scale?: number, quality?: number, format?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CompressedScreenshotResponse, any, {}>>;
    /**
     * Take a screenshot of a specific region
     * @summary Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeRegionScreenshot(sandboxId: string, height: number, width: number, y: number, x: number, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegionScreenshotResponse, any, {}>>;
    /**
     * Take a screenshot of the entire screen
     * @summary Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    takeScreenshot(sandboxId: string, xDaytonaOrganizationID?: string, showCursor?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ScreenshotResponse, any, {}>>;
    /**
     * Type text using keyboard
     * @summary Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    typeText(sandboxId: string, keyboardTypeRequest: KeyboardTypeRequest, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    uploadFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, file?: File, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ToolboxApi
     */
    uploadFiles(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
}
