/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateWorkspace } from '../models';
import type { PortPreviewUrl } from '../models';
import type { SandboxLabels } from '../models';
import type { Workspace } from '../models';
/**
 * WorkspaceApi - axios parameter creator
 * @export
 */
export declare const WorkspaceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    archiveWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createBackupWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createWorkspaceDeprecated: (createWorkspace: CreateWorkspace, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteWorkspaceDeprecated: (workspaceId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getBuildLogsWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPortPreviewUrlWorkspaceDeprecated: (workspaceId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listWorkspacesDeprecated: (xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceLabelsWorkspaceDeprecated: (workspaceId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutoArchiveIntervalWorkspaceDeprecated: (workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutostopIntervalWorkspaceDeprecated: (workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopWorkspaceDeprecated: (workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updatePublicStatusWorkspaceDeprecated: (workspaceId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WorkspaceApi - functional programming interface
 * @export
 */
export declare const WorkspaceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    archiveWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createBackupWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createWorkspaceDeprecated(createWorkspace: CreateWorkspace, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteWorkspaceDeprecated(workspaceId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getBuildLogsWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPortPreviewUrlWorkspaceDeprecated(workspaceId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PortPreviewUrl>>;
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Workspace>>;
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listWorkspacesDeprecated(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Workspace>>>;
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceLabelsWorkspaceDeprecated(workspaceId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxLabels>>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutoArchiveIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutostopIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updatePublicStatusWorkspaceDeprecated(workspaceId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WorkspaceApi - factory interface
 * @export
 */
export declare const WorkspaceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    archiveWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createBackupWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createWorkspaceDeprecated(createWorkspace: CreateWorkspace, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteWorkspaceDeprecated(workspaceId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getBuildLogsWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPortPreviewUrlWorkspaceDeprecated(workspaceId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<PortPreviewUrl>;
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Workspace>;
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listWorkspacesDeprecated(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Workspace>>;
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceLabelsWorkspaceDeprecated(workspaceId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<SandboxLabels>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutoArchiveIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutostopIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updatePublicStatusWorkspaceDeprecated(workspaceId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * WorkspaceApi - object-oriented interface
 * @export
 * @class WorkspaceApi
 * @extends {BaseAPI}
 */
export declare class WorkspaceApi extends BaseAPI {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    archiveWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    createBackupWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    createWorkspaceDeprecated(createWorkspace: CreateWorkspace, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    deleteWorkspaceDeprecated(workspaceId: string, force: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    getBuildLogsWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, follow?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    getPortPreviewUrlWorkspaceDeprecated(workspaceId: string, port: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PortPreviewUrl, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    getWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, verbose?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    listWorkspacesDeprecated(xDaytonaOrganizationID?: string, verbose?: boolean, labels?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Workspace[], any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    replaceLabelsWorkspaceDeprecated(workspaceId: string, sandboxLabels: SandboxLabels, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SandboxLabels, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    setAutoArchiveIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    setAutostopIntervalWorkspaceDeprecated(workspaceId: string, interval: number, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    startWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    stopWorkspaceDeprecated(workspaceId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    updatePublicStatusWorkspaceDeprecated(workspaceId: string, isPublic: boolean, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
}
