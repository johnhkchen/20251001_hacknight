"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuditApi = exports.AuditApiFactory = exports.AuditApiFp = exports.AuditApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * AuditApi - axios parameter creator
 * @export
 */
const AuditApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create audit log entry
         * @param {CreateAuditLog} createAuditLog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuditLog: async (createAuditLog, options = {}) => {
            // verify required parameter 'createAuditLog' is not null or undefined
            (0, common_1.assertParamExists)('createAuditLog', 'createAuditLog', createAuditLog);
            const localVarPath = `/audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(createAuditLog, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get all audit logs
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuditLogs: async (limit, page, options = {}) => {
            const localVarPath = `/audit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get audit logs for organization
         * @param {string} organizationId Organization ID
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAuditLogs: async (organizationId, limit, page, options = {}) => {
            // verify required parameter 'organizationId' is not null or undefined
            (0, common_1.assertParamExists)('getOrganizationAuditLogs', 'organizationId', organizationId);
            const localVarPath = `/audit/organizations/{organizationId}`.replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication bearer required
            // http bearer authentication required
            await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration);
            // authentication oauth2 required
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.AuditApiAxiosParamCreator = AuditApiAxiosParamCreator;
/**
 * AuditApi - functional programming interface
 * @export
 */
const AuditApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.AuditApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Create audit log entry
         * @param {CreateAuditLog} createAuditLog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuditLog(createAuditLog, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuditLog(createAuditLog, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuditApi.createAuditLog']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get all audit logs
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAuditLogs(limit, page, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAuditLogs(limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuditApi.getAllAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         *
         * @summary Get audit logs for organization
         * @param {string} organizationId Organization ID
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationAuditLogs(organizationId, limit, page, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAuditLogs(organizationId, limit, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['AuditApi.getOrganizationAuditLogs']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.AuditApiFp = AuditApiFp;
/**
 * AuditApi - factory interface
 * @export
 */
const AuditApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.AuditApiFp)(configuration);
    return {
        /**
         *
         * @summary Create audit log entry
         * @param {CreateAuditLog} createAuditLog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuditLog(createAuditLog, options) {
            return localVarFp.createAuditLog(createAuditLog, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get all audit logs
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAuditLogs(limit, page, options) {
            return localVarFp.getAllAuditLogs(limit, page, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get audit logs for organization
         * @param {string} organizationId Organization ID
         * @param {number} [limit] Number of items per page (default: 10)
         * @param {number} [page] Page number (default: 1)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationAuditLogs(organizationId, limit, page, options) {
            return localVarFp
                .getOrganizationAuditLogs(organizationId, limit, page, options)
                .then((request) => request(axios, basePath));
        },
    };
};
exports.AuditApiFactory = AuditApiFactory;
/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
class AuditApi extends base_1.BaseAPI {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    createAuditLog(createAuditLog, options) {
        return (0, exports.AuditApiFp)(this.configuration)
            .createAuditLog(createAuditLog, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    getAllAuditLogs(limit, page, options) {
        return (0, exports.AuditApiFp)(this.configuration)
            .getAllAuditLogs(limit, page, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    getOrganizationAuditLogs(organizationId, limit, page, options) {
        return (0, exports.AuditApiFp)(this.configuration)
            .getOrganizationAuditLogs(organizationId, limit, page, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.AuditApi = AuditApi;
//# sourceMappingURL=audit-api.js.map