/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateVolume } from '../models';
import type { VolumeDto } from '../models';
/**
 * VolumesApi - axios parameter creator
 * @export
 */
export declare const VolumesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new volume
     * @param {CreateVolume} createVolume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVolume: (createVolume: CreateVolume, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete volume
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVolume: (volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get volume details
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolume: (volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get volume details by name
     * @param {string} name Name of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolumeByName: (name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all volumes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [includeDeleted] Include deleted volumes in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVolumes: (xDaytonaOrganizationID?: string, includeDeleted?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VolumesApi - functional programming interface
 * @export
 */
export declare const VolumesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a new volume
     * @param {CreateVolume} createVolume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVolume(createVolume: CreateVolume, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeDto>>;
    /**
     *
     * @summary Delete volume
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get volume details
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeDto>>;
    /**
     *
     * @summary Get volume details by name
     * @param {string} name Name of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolumeByName(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeDto>>;
    /**
     *
     * @summary List all volumes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [includeDeleted] Include deleted volumes in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVolumes(xDaytonaOrganizationID?: string, includeDeleted?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VolumeDto>>>;
};
/**
 * VolumesApi - factory interface
 * @export
 */
export declare const VolumesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a new volume
     * @param {CreateVolume} createVolume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createVolume(createVolume: CreateVolume, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<VolumeDto>;
    /**
     *
     * @summary Delete volume
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get volume details
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<VolumeDto>;
    /**
     *
     * @summary Get volume details by name
     * @param {string} name Name of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getVolumeByName(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<VolumeDto>;
    /**
     *
     * @summary List all volumes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [includeDeleted] Include deleted volumes in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listVolumes(xDaytonaOrganizationID?: string, includeDeleted?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<Array<VolumeDto>>;
};
/**
 * VolumesApi - object-oriented interface
 * @export
 * @class VolumesApi
 * @extends {BaseAPI}
 */
export declare class VolumesApi extends BaseAPI {
    /**
     *
     * @summary Create a new volume
     * @param {CreateVolume} createVolume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    createVolume(createVolume: CreateVolume, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VolumeDto, any, {}>>;
    /**
     *
     * @summary Delete volume
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    deleteVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get volume details
     * @param {string} volumeId ID of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    getVolume(volumeId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VolumeDto, any, {}>>;
    /**
     *
     * @summary Get volume details by name
     * @param {string} name Name of the volume
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    getVolumeByName(name: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VolumeDto, any, {}>>;
    /**
     *
     * @summary List all volumes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [includeDeleted] Include deleted volumes in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumesApi
     */
    listVolumes(xDaytonaOrganizationID?: string, includeDeleted?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VolumeDto[], any, {}>>;
}
