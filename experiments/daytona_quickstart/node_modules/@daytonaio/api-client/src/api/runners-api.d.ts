/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateRunner } from '../models';
import type { Runner } from '../models';
import type { RunnerSnapshotDto } from '../models';
/**
 * RunnersApi - axios parameter creator
 * @export
 */
export declare const RunnersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner: (createRunner: CreateRunner, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerBySandboxId: (sandboxId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnersBySnapshotRef: (ref: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RunnersApi - functional programming interface
 * @export
 */
export declare const RunnersApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner(createRunner: CreateRunner, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>>;
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnersBySnapshotRef(ref: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RunnerSnapshotDto>>>;
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RunnersApi - factory interface
 * @export
 */
export declare const RunnersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner(createRunner: CreateRunner, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<Runner>;
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnersBySnapshotRef(ref: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RunnerSnapshotDto>>;
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * RunnersApi - object-oriented interface
 * @export
 * @class RunnersApi
 * @extends {BaseAPI}
 */
export declare class RunnersApi extends BaseAPI {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunnersApi
     */
    createRunner(createRunner: CreateRunner, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunnersApi
     */
    getRunnerBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Runner, any, {}>>;
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunnersApi
     */
    getRunnersBySnapshotRef(ref: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RunnerSnapshotDto[], any, {}>>;
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunnersApi
     */
    listRunners(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RunnersApi
     */
    updateRunnerScheduling(id: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
}
