/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AuditLog } from '../models';
import type { CreateAuditLog } from '../models';
import type { PaginatedAuditLogs } from '../models';
/**
 * AuditApi - axios parameter creator
 * @export
 */
export declare const AuditApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditLog: (createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAuditLogs: (limit?: number, page?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAuditLogs: (organizationId: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuditApi - functional programming interface
 * @export
 */
export declare const AuditApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditLog(createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLog>>;
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAuditLogs(limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAuditLogs>>;
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAuditLogs(organizationId: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAuditLogs>>;
};
/**
 * AuditApi - factory interface
 * @export
 */
export declare const AuditApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditLog(createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog>;
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAuditLogs(limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAuditLogs>;
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAuditLogs(organizationId: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAuditLogs>;
};
/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export declare class AuditApi extends BaseAPI {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    createAuditLog(createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog, any, {}>>;
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    getAllAuditLogs(limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedAuditLogs, any, {}>>;
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    getOrganizationAuditLogs(organizationId: string, limit?: number, page?: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PaginatedAuditLogs, any, {}>>;
}
