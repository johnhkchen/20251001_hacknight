"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigApi = exports.ConfigApiFactory = exports.ConfigApiFp = exports.ConfigApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ConfigApi - axios parameter creator
 * @export
 */
const ConfigApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerGetConfig: async (options = {}) => {
            const localVarPath = `/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ConfigApiAxiosParamCreator = ConfigApiAxiosParamCreator;
/**
 * ConfigApi - functional programming interface
 * @export
 */
const ConfigApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ConfigApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configControllerGetConfig(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.configControllerGetConfig(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = base_1.operationServerMap['ConfigApi.configControllerGetConfig']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.ConfigApiFp = ConfigApiFp;
/**
 * ConfigApi - factory interface
 * @export
 */
const ConfigApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ConfigApiFp)(configuration);
    return {
        /**
         *
         * @summary Get config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configControllerGetConfig(options) {
            return localVarFp.configControllerGetConfig(options).then((request) => request(axios, basePath));
        },
    };
};
exports.ConfigApiFactory = ConfigApiFactory;
/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
class ConfigApi extends base_1.BaseAPI {
    /**
     *
     * @summary Get config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    configControllerGetConfig(options) {
        return (0, exports.ConfigApiFp)(this.configuration)
            .configControllerGetConfig(options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.ConfigApi = ConfigApi;
//# sourceMappingURL=config-api.js.map