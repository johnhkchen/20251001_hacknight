/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { StorageAccessDto } from '../models';
/**
 * ObjectStorageApi - axios parameter creator
 * @export
 */
export declare const ObjectStorageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushAccess: (xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ObjectStorageApi - functional programming interface
 * @export
 */
export declare const ObjectStorageApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageAccessDto>>;
};
/**
 * ObjectStorageApi - factory interface
 * @export
 */
export declare const ObjectStorageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<StorageAccessDto>;
};
/**
 * ObjectStorageApi - object-oriented interface
 * @export
 * @class ObjectStorageApi
 * @extends {BaseAPI}
 */
export declare class ObjectStorageApi extends BaseAPI {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectStorageApi
     */
    getPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StorageAccessDto, any, {}>>;
}
