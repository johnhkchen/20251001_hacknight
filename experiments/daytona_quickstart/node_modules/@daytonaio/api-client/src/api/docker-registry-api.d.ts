/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CreateDockerRegistry } from '../models';
import type { DockerRegistry } from '../models';
import type { RegistryPushAccessDto } from '../models';
import type { UpdateDockerRegistry } from '../models';
/**
 * DockerRegistryApi - axios parameter creator
 * @export
 */
export declare const DockerRegistryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry: (createDockerRegistry: CreateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry: (id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry: (id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess: (xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries: (xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry: (id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry: (id: string, updateDockerRegistry: UpdateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DockerRegistryApi - functional programming interface
 * @export
 */
export declare const DockerRegistryApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry(createDockerRegistry: CreateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>>;
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>>;
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryPushAccessDto>>;
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DockerRegistry>>>;
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>>;
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry(id: string, updateDockerRegistry: UpdateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>>;
};
/**
 * DockerRegistryApi - factory interface
 * @export
 */
export declare const DockerRegistryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry(createDockerRegistry: CreateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DockerRegistry>;
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DockerRegistry>;
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<RegistryPushAccessDto>;
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DockerRegistry>>;
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DockerRegistry>;
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry(id: string, updateDockerRegistry: UpdateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<DockerRegistry>;
};
/**
 * DockerRegistryApi - object-oriented interface
 * @export
 * @class DockerRegistryApi
 * @extends {BaseAPI}
 */
export declare class DockerRegistryApi extends BaseAPI {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    createRegistry(createDockerRegistry: CreateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DockerRegistry, any, {}>>;
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    deleteRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any, {}>>;
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    getRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DockerRegistry, any, {}>>;
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    getTransientPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegistryPushAccessDto, any, {}>>;
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    listRegistries(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DockerRegistry[], any, {}>>;
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    setDefaultRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DockerRegistry, any, {}>>;
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DockerRegistryApi
     */
    updateRegistry(id: string, updateDockerRegistry: UpdateDockerRegistry, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DockerRegistry, any, {}>>;
}
