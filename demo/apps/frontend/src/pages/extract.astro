---
// No server-side fetching needed for this interactive page
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Recipe Pipeline Demo</title>
    <style>
      body {
        font-family: system-ui, -apple-system, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 2rem;
      }
      textarea {
        width: 100%;
        min-height: 150px;
        padding: 0.5rem;
        font-family: inherit;
        font-size: 1rem;
        border: 2px solid #ccc;
        border-radius: 4px;
      }
      button {
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 1rem;
      }
      button:hover {
        background: #0056b3;
      }
      button:disabled {
        background: #ccc;
        cursor: not-allowed;
      }
      .result {
        margin-top: 2rem;
        padding: 1rem;
        background: #f5f5f5;
        border-radius: 4px;
      }
      .trace {
        margin-top: 1rem;
        padding: 1rem;
        background: #e8f4f8;
        border-radius: 4px;
        font-family: monospace;
        font-size: 0.9rem;
        white-space: pre-wrap;
        overflow-x: auto;
      }
      .hidden {
        display: none;
      }
      .error {
        color: red;
        margin-top: 1rem;
      }
    </style>
  </head>
  <body>
    <h1>Recipe Rosetta</h1>
    <p>Upload a cookbook page image to extract and convert the recipe to Astro markdown</p>

    <div>
      <input type="file" id="imageInput" accept="image/*" />
      <button id="runButton">Extract Recipe</button>
    </div>

    <div id="preview" class="hidden">
      <h3>Image Preview</h3>
      <img id="previewImage" alt="Preview" style="max-width: 100%; max-height: 400px; border: 1px solid #ccc; border-radius: 4px;" />
    </div>

    <div id="error" class="error hidden"></div>

    <div id="resultContainer" class="hidden">
      <div class="result">
        <h2>Extracted Recipe</h2>
        <pre id="markdownPreview" style="background: white; padding: 1rem; border: 1px solid #ddd; border-radius: 4px; overflow-x: auto;"></pre>
        <p><strong>Run ID:</strong> <span id="runId"></span></p>
        <button id="downloadButton">Download Markdown</button>
        <button id="viewTraceButton">View Trace</button>
      </div>

      <div id="traceContainer" class="hidden">
        <h3>Opik Trace</h3>
        <div class="trace" id="traceData"></div>
      </div>
    </div>

    <script>
      const imageInput = document.getElementById('imageInput');
      const runButton = document.getElementById('runButton');
      const preview = document.getElementById('preview');
      const previewImage = document.getElementById('previewImage');
      const resultContainer = document.getElementById('resultContainer');
      const markdownPreview = document.getElementById('markdownPreview');
      const runIdEl = document.getElementById('runId');
      const downloadButton = document.getElementById('downloadButton');
      const viewTraceButton = document.getElementById('viewTraceButton');
      const traceContainer = document.getElementById('traceContainer');
      const traceData = document.getElementById('traceData');
      const errorEl = document.getElementById('error');

      let currentRunId = null;
      let currentMarkdown = null;
      let currentFilename = null;

      imageInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            previewImage.src = e.target.result;
            preview.classList.remove('hidden');
          };
          reader.readAsDataURL(file);
        }
      });

      runButton.addEventListener('click', async () => {
        const file = imageInput.files[0];

        if (!file) {
          showError('Please select an image file');
          return;
        }

        runButton.disabled = true;
        runButton.textContent = 'Extracting Recipe...';
        hideError();
        resultContainer.classList.add('hidden');
        traceContainer.classList.add('hidden');

        try {
          const formData = new FormData();
          formData.append('image', file);

          const response = await fetch('/api/run', {
            method: 'POST',
            body: formData,
          });

          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error || 'Failed to extract recipe');
          }

          const data = await response.json();
          currentRunId = data.runId;
          currentMarkdown = data.markdown;
          currentFilename = data.filename;

          markdownPreview.textContent = data.markdown;
          runIdEl.textContent = data.runId;
          resultContainer.classList.remove('hidden');
        } catch (error) {
          showError(error.message);
        } finally {
          runButton.disabled = false;
          runButton.textContent = 'Extract Recipe';
        }
      });

      downloadButton.addEventListener('click', () => {
        if (!currentMarkdown || !currentFilename) return;

        const blob = new Blob([currentMarkdown], { type: 'text/markdown' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = currentFilename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      });

      viewTraceButton.addEventListener('click', async () => {
        if (!currentRunId) return;

        viewTraceButton.disabled = true;
        viewTraceButton.textContent = 'Loading...';

        try {
          const response = await fetch(`/api/trace/${currentRunId}`);

          if (!response.ok) {
            throw new Error('Failed to fetch trace');
          }

          const trace = await response.json();
          traceData.textContent = JSON.stringify(trace, null, 2);
          traceContainer.classList.remove('hidden');
        } catch (error) {
          showError(error.message);
        } finally {
          viewTraceButton.disabled = false;
          viewTraceButton.textContent = 'View Trace';
        }
      });

      function showError(message) {
        errorEl.textContent = message;
        errorEl.classList.remove('hidden');
      }

      function hideError() {
        errorEl.classList.add('hidden');
      }
    </script>
  </body>
</html>
